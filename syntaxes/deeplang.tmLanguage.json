{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",

	"name": "deeplang",
	"scopeName": "source.deeplang",
  "version": "0.0.1",

  "fileTypes": [
    "dp"
  ],

  "patterns": [
    {
			"include": "#keywords"
		},
    {
      "include": "#ever_present_context"
    },
    {
      "include": "#constructor_root"
    },
    {
      "include": "#destructor_root"
    },
    {
      "include": "#function_definition"
    },
    {
      "include": "#operator_overload"
    },
    {
      "include": "#using_namespace"
    },
    {
      "include": "#type_alias"
    },
    {
      "include": "#using_name"
    },
    {
      "include": "#namespace_alias"
    },
    {
      "include": "#namespace_block"
    },
    {
      "include": "#extern_block"
    },
    {
      "include": "#typedef_class"
    },
    {
      "include": "#typedef_struct"
    },
    {
      "include": "#typedef_union"
    },
    {
      "include": "#misc_keywords"
    },
    {
      "include": "#standard_declares"
    },
    {
      "include": "#class_block"
    },
    {
      "include": "#struct_block"
    },
    {
      "include": "#union_block"
    },
    {
      "include": "#enum_block"
    },
    {
      "include": "#template_isolated_definition"
    },
    {
      "include": "#template_definition"
    },
    {
      "include": "#access_control_keywords"
    },
    {
      "include": "#block"
    },
    {
      "include": "#static_assert"
    },
    {
      "include": "#assembly"
    },
    {
      "include": "#function_pointer"
    },
    {
      "include": "#evaluation_context"
    }
  ],

  "repository": {
    "keywords": {
			"patterns": [
				{
					"name": "keyword.control.deeplang",
					"match": "\\b(in|fun|interface|impl|as|match|extends|=>)\\b"
				}
			]
		},

    "access_control_keywords": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(((?:(?:protected)|(?:private)|(?:public)))(?:(?:\\s)+)?(:))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "storage.type.modifier.access.control.$4.dp"
        },
        "4": {
        },
        "5": {
          "name": "punctuation.separator.colon.access.control.dp"
        }
      }
    },
    "alignas_attribute": {
      "begin": "alignas\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.attribute.begin.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.attribute.end.dp"
        }
      },
      "name": "support.other.attribute.dp",
      "patterns": [
        {
          "include": "#attributes_context"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#string_context"
            }
          ]
        },
        {
          "match": "(using)(?:\\s)+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))",
          "captures": {
            "1": {
              "name": "keyword.other.using.directive.dp"
            },
            "2": {
              "name": "entity.name.namespace.dp"
            }
          }
        },
        {
          "match": ",",
          "name": "punctuation.separator.attribute.dp"
        },
        {
          "match": ":",
          "name": "punctuation.accessor.attribute.dp"
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)",
          "name": "entity.name.namespace.dp"
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
          "name": "entity.other.attribute.$0.dp"
        },
        {
          "include": "#number_literal"
        }
      ]
    },
    "alignas_operator": {
      "begin": "((?<!\\w)alignas(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.dp keyword.operator.alignas.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.alignas.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.alignas.dp"
        }
      },
      "contentName": "meta.arguments.operator.alignas",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "alignof_operator": {
      "begin": "((?<!\\w)alignof(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.dp keyword.operator.alignof.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.alignof.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.alignof.dp"
        }
      },
      "contentName": "meta.arguments.operator.alignof",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "assembly": {
      "begin": "(\\b(?:__asm__|asm)\\b)(?:(?:\\s)+)?((?:volatile)?)",
      "end": "(?!\\G)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.asm.dp"
        },
        "2": {
          "name": "storage.modifier.dp"
        }
      },
      "endCaptures": {
      },
      "name": "meta.asm.dp",
      "patterns": [
        {
          "match": "^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:\\n)|$)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "2": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "3": {
              "name": "comment.block.dp"
            },
            "4": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            }
          }
        },
        {
          "include": "#comments"
        },
        {
          "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.assembly.dp"
            },
            "1": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "2": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "3": {
              "name": "comment.block.dp"
            },
            "4": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.assembly.dp"
            }
          },
          "patterns": [
            {
              "begin": "(R?)(\")",
              "end": "\"",
              "beginCaptures": {
                "1": {
                  "name": "meta.encoding.dp"
                },
                "2": {
                  "name": "punctuation.definition.string.begin.assembly.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.assembly.dp"
                }
              },
              "name": "string.quoted.double.dp",
              "contentName": "meta.embedded.assembly",
              "patterns": [
                {
                  "include": "source.asm"
                },
                {
                  "include": "source.x86"
                },
                {
                  "include": "source.x86_64"
                },
                {
                  "include": "source.arm"
                },
                {
                  "include": "#backslash_escapes"
                },
                {
                  "include": "#string_escaped_char"
                }
              ]
            },
            {
              "begin": "\\(",
              "end": "\\)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.parens.begin.bracket.round.assembly.inner.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.parens.end.bracket.round.assembly.inner.dp"
                }
              },
              "patterns": [
                {
                  "include": "#evaluation_context"
                }
              ]
            },
            {
              "match": "\\[((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "5": {
                  "name": "variable.other.asm.label.dp"
                },
                "6": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "7": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "8": {
                  "name": "comment.block.dp"
                },
                "9": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            },
            {
              "match": ":",
              "name": "punctuation.separator.delimiter.colon.assembly.dp"
            },
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "assignment_operator": {
      "match": "\\=",
      "name": "keyword.operator.assignment.dp"
    },
    "attributes_context": {
      "patterns": [
        {
          "include": "#cpp_attributes"
        },
        {
          "include": "#gcc_attributes"
        },
        {
          "include": "#ms_attributes"
        },
        {
          "include": "#alignas_attribute"
        }
      ]
    },
    "backslash_escapes": {
      "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
      "name": "constant.character.escape"
    },
    "block": {
      "begin": "{",
      "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.block.begin.bracket.curly.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.block.end.bracket.curly.dp"
        }
      },
      "name": "meta.block.dp",
      "patterns": [
        {
          "include": "#function_body_context"
        }
      ]
    },
    "block_comment": {
      "begin": "\\s*+(\\/\\*)",
      "end": "\\*\\/",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.begin.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.end.dp"
        }
      },
      "name": "comment.block.dp"
    },
    "builtin_storage_type_initilizer": {
      "begin": "(?:\\s)*+(?<!\\w)(?:(?:(?:((?:(?:Type)|(?:i8)|(?:i16)|(?:i32)|(?:i64)|(?:u8)|(?:u16)|(?:u32)|(?:u64)|(?:f32)|(?:f64)|(?:I8)|(?:I16)|(?:I32)|(?:I64)|(?:U8)|(?:U16)|(?:U32)|(?:U64)|(?:F32)|(?:F64)|(?:This)|(?:Int)|(?:Char)|(?:Bool)|(?:String)|(?:let)|(?:mut)|(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_](?:\\w)*_t))(?!\\w)(?:\\s)*+(?<!\\w)(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.primitive.dp storage.type.built-in.primitive.dp"
        },
        "2": {
          "name": "storage.type.dp storage.type.built-in.dp"
        },
        "3": {
          "name": "support.type.posix-reserved.pthread.dp support.type.built-in.posix-reserved.pthread.dp"
        },
        "4": {
          "name": "support.type.posix-reserved.dp support.type.built-in.posix-reserved.dp"
        },
        "5": {
          "name": "punctuation.section.arguments.begin.bracket.round.initializer.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.initializer.dp"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "case_statement": {
      "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)case(?!\\w))",
      "end": ":",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "keyword.control.case.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.separator.colon.case.dp"
        }
      },
      "name": "meta.conditional.case.dp",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "class_block": {
      "begin": "((?<!\\w)Struct(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*+)?(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(:(?!:)))?)",
      "end": "(?:(?:(?<=\\}|%>|\\?\\?>)(?:(?:\\s)+)?(;)|(;))|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.Struct.dp"
        },
        "1": {
          "name": "storage.type.$1.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "8": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "9": {
          "name": "comment.block.dp"
        },
        "10": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))",
              "captures": {
                "1": {
                  "name": "storage.type.modifier.final.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            },
            {
              "match": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=:|{|$)",
              "captures": {
                "1": {
                  "name": "entity.name.type.Struct.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "6": {
                  "name": "storage.type.modifier.final.dp"
                },
                "7": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "8": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "9": {
                  "name": "comment.block.dp"
                },
                "10": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            },
            {
              "match": "DLLEXPORT",
              "name": "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.dp"
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.other.preprocessor.macro.predefined.probably.$0.dp"
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "13": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "14": {
          "name": "comment.block.dp"
        },
        "15": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "16": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "17": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "18": {
          "name": "comment.block.dp"
        },
        "19": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "20": {
          "name": "punctuation.separator.colon.inheritance.dp"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.dp"
        },
        "2": {
          "name": "punctuation.terminator.statement.dp"
        }
      },
      "name": "meta.block.Struct.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.Struct.dp"
            }
          },
          "name": "meta.head.Struct.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "include": "#inheritance_context"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.Struct.dp"
            }
          },
          "name": "meta.body.Struct.dp",
          "patterns": [
            {
              "include": "#function_pointer"
            },
            {
              "include": "#static_assert"
            },
            {
              "include": "#constructor_inline"
            },
            {
              "include": "#destructor_inline"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.Struct.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "class_declare": {
      "match": "((?<!\\w)Struct(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\S)(?![:{a-zA-Z])",
      "captures": {
        "1": {
          "name": "storage.type.Struct.declare.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.type.Struct.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "name": "variable.other.object.declare.dp"
        },
        "13": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "14": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "comma": {
      "match": ",",
      "name": "punctuation.separator.delimiter.comma.dp"
    },
    "comma_in_template_argument": {
      "match": ",",
      "name": "punctuation.separator.delimiter.comma.template.argument.dp"
    },
    "comments": {
      "patterns": [
        {
          "begin": "^(?:(?:\\s)+)?+(\\/\\/[!\\/]+)",
          "end": "(?<=\\n)(?<!\\\\\\n)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.documentation.dp"
            }
          },
          "endCaptures": {
          },
          "name": "comment.line.double-slash.documentation.dp",
          "patterns": [
            {
              "include": "#line_continuation_character"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))(?:\\s)+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.Struct.doxygen.dp"
                },
                "2": {
                  "name": "markup.italic.doxygen.dp"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]b)(?:\\s)+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.Struct.doxygen.dp"
                },
                "2": {
                  "name": "markup.bold.doxygen.dp"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))(?:\\s)+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.Struct.doxygen.dp"
                },
                "2": {
                  "name": "markup.inline.raw.string.dp"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|Struct|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|type|subpage|subsection|subsubsection|type|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?(?:(?:\\s)+)?(?:in|out)(?:(?:\\s)+)?)+)\\])?(?:\\s)+(\\b\\w+\\b)",
              "captures": {
                "1": {
                  "name": "storage.type.Struct.doxygen.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "match": "in|out",
                      "name": "keyword.other.parameter.direction.$0.dp"
                    }
                  ]
                },
                "3": {
                  "name": "variable.parameter.dp"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|throws|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|startuml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
              "name": "storage.type.Struct.gtkdoc.dp"
            }
          ]
        },
        {
          "match": "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.begin.documentation.dp"
            },
            "2": {
              "patterns": [
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.Struct.doxygen.dp"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))(?:\\s)+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.Struct.doxygen.dp"
                    },
                    "2": {
                      "name": "markup.italic.doxygen.dp"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]b)(?:\\s)+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.Struct.doxygen.dp"
                    },
                    "2": {
                      "name": "markup.bold.doxygen.dp"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))(?:\\s)+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.Struct.doxygen.dp"
                    },
                    "2": {
                      "name": "markup.inline.raw.string.dp"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.Struct.doxygen.dp"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|Struct|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|type|subpage|subsection|subsubsection|type|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.Struct.doxygen.dp"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?(?:(?:\\s)+)?(?:in|out)(?:(?:\\s)+)?)+)\\])?(?:\\s)+(\\b\\w+\\b)",
                  "captures": {
                    "1": {
                      "name": "storage.type.Struct.doxygen.dp"
                    },
                    "2": {
                      "patterns": [
                        {
                          "match": "in|out",
                          "name": "keyword.other.parameter.direction.$0.dp"
                        }
                      ]
                    },
                    "3": {
                      "name": "variable.parameter.dp"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|throws|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.Struct.doxygen.dp"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|startuml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.Struct.doxygen.dp"
                },
                {
                  "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
                  "name": "storage.type.Struct.gtkdoc.dp"
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.comment.end.documentation.dp"
            }
          },
          "name": "comment.block.documentation.dp"
        },
        {
          "begin": "(?:(?:\\s)+)?+\\/\\*[!*]+(?:(?:(?:\\n)|$)|(?=\\s))",
          "end": "[!*]*\\*\\/",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.documentation.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.documentation.dp"
            }
          },
          "name": "comment.block.documentation.dp",
          "patterns": [
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))(?:\\s)+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.Struct.doxygen.dp"
                },
                "2": {
                  "name": "markup.italic.doxygen.dp"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]b)(?:\\s)+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.Struct.doxygen.dp"
                },
                "2": {
                  "name": "markup.bold.doxygen.dp"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))(?:\\s)+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.Struct.doxygen.dp"
                },
                "2": {
                  "name": "markup.inline.raw.string.dp"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|Struct|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|type|subpage|subsection|subsubsection|type|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?(?:(?:\\s)+)?(?:in|out)(?:(?:\\s)+)?)+)\\])?(?:\\s)+(\\b\\w+\\b)",
              "captures": {
                "1": {
                  "name": "storage.type.Struct.doxygen.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "match": "in|out",
                      "name": "keyword.other.parameter.direction.$0.dp"
                    }
                  ]
                },
                "3": {
                  "name": "variable.parameter.dp"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|throws|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|startuml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.Struct.doxygen.dp"
            },
            {
              "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
              "name": "storage.type.Struct.gtkdoc.dp"
            }
          ]
        },
        {
          "include": "#emacs_file_banner"
        },
        {
          "include": "#block_comment"
        },
        {
          "include": "#line_comment"
        },
        {
          "include": "#invalid_comment_end"
        }
      ]
    },
    "constructor_inline": {
      "begin": "^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=\\())",
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.function.definition.special.constructor.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#functional_specifiers_pre_parameters"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "8": {
          "name": "comment.block.dp"
        },
        "9": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "12": {
          "name": "comment.block.dp"
        },
        "13": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "14": {
          "name": "storage.type.modifier.calling-convention.dp"
        },
        "15": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "16": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "17": {
          "name": "comment.block.dp"
        },
        "18": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "19": {
          "name": "entity.name.function.constructor.dp entity.name.function.definition.special.constructor.dp"
        }
      },
      "endCaptures": {
      },
      "name": "meta.function.definition.special.constructor.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.function.definition.special.constructor.dp"
            }
          },
          "name": "meta.head.function.definition.special.constructor.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "match": "(\\=)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(default)|(delete))",
              "captures": {
                "1": {
                  "name": "keyword.operator.assignment.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "6": {
                  "name": "keyword.other.default.constructor.dp"
                },
                "7": {
                  "name": "keyword.other.delete.constructor.dp"
                }
              }
            },
            {
              "include": "#functional_specifiers_pre_parameters"
            },
            {
              "begin": ":",
              "end": "(?=\\{)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.separator.initializers.dp"
                }
              },
              "endCaptures": {
              },
              "patterns": [
                {
                  "begin": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?(\\()",
                  "end": "\\)",
                  "beginCaptures": {
                    "1": {
                      "name": "entity.name.function.call.initializer.dp"
                    },
                    "2": {
                      "name": "meta.template.call.dp",
                      "patterns": [
                        {
                          "include": "#template_call_range"
                        }
                      ]
                    },
                    "3": {
                    },
                    "4": {
                      "name": "punctuation.section.arguments.begin.bracket.round.function.call.initializer.dp"
                    }
                  },
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.section.arguments.end.bracket.round.function.call.initializer.dp"
                    }
                  },
                  "contentName": "meta.parameter.initialization",
                  "patterns": [
                    {
                      "include": "#evaluation_context"
                    }
                  ]
                },
                {
                  "begin": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(\\{)",
                  "end": "\\}",
                  "beginCaptures": {
                    "1": {
                      "name": "entity.name.function.call.initializer.dp"
                    },
                    "2": {
                      "name": "punctuation.section.arguments.begin.bracket.round.function.call.initializer.dp"
                    }
                  },
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.section.arguments.end.bracket.round.function.call.initializer.dp"
                    }
                  },
                  "contentName": "meta.parameter.initialization",
                  "patterns": [
                    {
                      "include": "#evaluation_context"
                    }
                  ]
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.delimiter.comma.dp"
                },
                {
                  "include": "#comments"
                }
              ]
            },
            {
              "begin": "\\(",
              "end": "\\)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.begin.bracket.round.special.constructor.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.end.bracket.round.special.constructor.dp"
                }
              },
              "contentName": "meta.function.definition.parameters.special.constructor",
              "patterns": [
                {
                  "include": "#function_parameter_context"
                },
                {
                  "include": "#evaluation_context"
                }
              ]
            },
            {
              "match": "((?:(?:final)|(?:override)))+",
              "captures": {
                "1": {
                  "name": "keyword.operator.$1.dp"
                }
              }
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.function.definition.special.constructor.dp"
            }
          },
          "name": "meta.body.function.definition.special.constructor.dp",
          "patterns": [
            {
              "include": "#function_body_context"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.function.definition.special.constructor.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "constructor_root": {
      "begin": "\\s*+((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<12>?)+>)(?:\\s)*+)?::)*+)(((?>(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))::((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\14((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\())",
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.function.definition.special.constructor.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "storage.type.modifier.calling-convention.dp"
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "8": {
          "name": "comment.block.dp"
        },
        "9": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.constructor.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.constructor.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "12": {
        },
        "13": {
          "patterns": [
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?=:)",
              "name": "entity.name.type.constructor.dp"
            },
            {
              "match": "(?<=:)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.function.definition.special.constructor.dp"
            },
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.constructor.dp"
            }
          ]
        },
        "14": {
        },
        "15": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "16": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "17": {
          "name": "comment.block.dp"
        },
        "18": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "20": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "21": {
          "name": "comment.block.dp"
        },
        "22": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "23": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "24": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "25": {
          "name": "comment.block.dp"
        },
        "26": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      },
      "endCaptures": {
      },
      "name": "meta.function.definition.special.constructor.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.function.definition.special.constructor.dp"
            }
          },
          "name": "meta.head.function.definition.special.constructor.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "match": "(\\=)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(default)|(delete))",
              "captures": {
                "1": {
                  "name": "keyword.operator.assignment.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "6": {
                  "name": "keyword.other.default.constructor.dp"
                },
                "7": {
                  "name": "keyword.other.delete.constructor.dp"
                }
              }
            },
            {
              "include": "#functional_specifiers_pre_parameters"
            },
            {
              "begin": ":",
              "end": "(?=\\{)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.separator.initializers.dp"
                }
              },
              "endCaptures": {
              },
              "patterns": [
                {
                  "begin": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?(\\()",
                  "end": "\\)",
                  "beginCaptures": {
                    "1": {
                      "name": "entity.name.function.call.initializer.dp"
                    },
                    "2": {
                      "name": "meta.template.call.dp",
                      "patterns": [
                        {
                          "include": "#template_call_range"
                        }
                      ]
                    },
                    "3": {
                    },
                    "4": {
                      "name": "punctuation.section.arguments.begin.bracket.round.function.call.initializer.dp"
                    }
                  },
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.section.arguments.end.bracket.round.function.call.initializer.dp"
                    }
                  },
                  "contentName": "meta.parameter.initialization",
                  "patterns": [
                    {
                      "include": "#evaluation_context"
                    }
                  ]
                },
                {
                  "begin": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(\\{)",
                  "end": "\\}",
                  "beginCaptures": {
                    "1": {
                      "name": "entity.name.function.call.initializer.dp"
                    },
                    "2": {
                      "name": "punctuation.section.arguments.begin.bracket.round.function.call.initializer.dp"
                    }
                  },
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.section.arguments.end.bracket.round.function.call.initializer.dp"
                    }
                  },
                  "contentName": "meta.parameter.initialization",
                  "patterns": [
                    {
                      "include": "#evaluation_context"
                    }
                  ]
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.delimiter.comma.dp"
                },
                {
                  "include": "#comments"
                }
              ]
            },
            {
              "begin": "\\(",
              "end": "\\)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.begin.bracket.round.special.constructor.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.end.bracket.round.special.constructor.dp"
                }
              },
              "contentName": "meta.function.definition.parameters.special.constructor",
              "patterns": [
                {
                  "include": "#function_parameter_context"
                },
                {
                  "include": "#evaluation_context"
                }
              ]
            },
            {
              "match": "((?:(?:final)|(?:override)))+",
              "captures": {
                "1": {
                  "name": "keyword.operator.$1.dp"
                }
              }
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.function.definition.special.constructor.dp"
            }
          },
          "name": "meta.body.function.definition.special.constructor.dp",
          "patterns": [
            {
              "include": "#function_body_context"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.function.definition.special.constructor.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "control_flow_keywords": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:(?:co_return)|(?:co_yield)|(?:co_await)|(?:continue)|(?:default)|(?:switch)|(?:return)|(?:catch)|(?:while)|(?:throw)|(?:break)|(?:case)|(?:goto)|(?:else)|(?:for)|(?:try)|(?:if)|(?:do))(?!\\w))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "keyword.control.$3.dp"
        }
      }
    },
    "cpp_attributes": {
      "begin": "\\[\\[",
      "end": "\\]\\]",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.attribute.begin.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.attribute.end.dp"
        }
      },
      "name": "support.other.attribute.dp",
      "patterns": [
        {
          "include": "#attributes_context"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#string_context"
            }
          ]
        },
        {
          "match": "(using)(?:\\s)+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))",
          "captures": {
            "1": {
              "name": "keyword.other.using.directive.dp"
            },
            "2": {
              "name": "entity.name.namespace.dp"
            }
          }
        },
        {
          "match": ",",
          "name": "punctuation.separator.attribute.dp"
        },
        {
          "match": ":",
          "name": "punctuation.accessor.attribute.dp"
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)",
          "name": "entity.name.namespace.dp"
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
          "name": "entity.other.attribute.$0.dp"
        },
        {
          "include": "#number_literal"
        }
      ]
    },
    "curly_initializer": {
      "begin": "(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<18>?)+>)(?:\\s)*+)?::)*+)?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<18>?)+>)?(?![\\w<:.]))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\{)",
      "end": "\\}",
      "beginCaptures": {
        "1": {
          "name": "meta.qualified_type.dp",
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "4": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "5": {
          "name": "comment.block.dp"
        },
        "6": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "8": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "9": {
          "name": "comment.block.dp"
        },
        "10": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "13": {
        },
        "14": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "15": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "16": {
          "name": "comment.block.dp"
        },
        "17": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "18": {
        },
        "19": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "20": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "21": {
          "name": "comment.block.dp"
        },
        "22": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "23": {
          "name": "punctuation.section.arguments.begin.bracket.curly.initializer.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.curly.initializer.dp"
        }
      },
      "name": "meta.initialization.dp",
      "patterns": [
        {
          "include": "#evaluation_context"
        },
        {
          "include": "#comma"
        }
      ]
    },
    "d9bc4796b0b_module_import": {
      "match": "^((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((import))(?:(?:\\s)+)?(?:(?:(?:((<)[^>]*(>?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:\\n)|$)|(?=\\/\\/)))|((\\\")[^\\\"]*((?:\\\")?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:\\n)|$)|(?=\\/\\/))))|(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:\\.(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)*((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:\\n)|$)|(?=(?:\\/\\/|;)))))|((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:\\n)|$)|(?=(?:\\/\\/|;))))(?:(?:\\s)+)?(;?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "keyword.control.directive.import.dp"
        },
        "5": {
          "name": "string.quoted.other.lt-gt.include.dp"
        },
        "6": {
          "name": "punctuation.definition.string.begin.dp"
        },
        "7": {
          "name": "punctuation.definition.string.end.dp"
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "name": "string.quoted.double.include.dp"
        },
        "11": {
          "name": "punctuation.definition.string.begin.dp"
        },
        "12": {
          "name": "punctuation.definition.string.end.dp"
        },
        "13": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "14": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "15": {
          "name": "entity.name.other.preprocessor.macro.include.dp"
        },
        "16": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "17": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "18": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "21": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "22": {
          "name": "punctuation.terminator.statement.dp"
        }
      },
      "name": "meta.preprocessor.import.dp"
    },
    "d9bc4796b0b_preprocessor_number_literal": {
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "beginCaptures": {
              },
              "endCaptures": {
              },
              "patterns": [
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([pP])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.dp"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "4": {
                      "name": "constant.numeric.hexadecimal.dp"
                    },
                    "5": {
                      "name": "constant.numeric.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "7": {
                      "name": "keyword.other.unit.exponent.hexadecimal.dp"
                    },
                    "8": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.dp"
                    },
                    "9": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.dp"
                    },
                    "10": {
                      "name": "constant.numeric.exponent.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "11": {
                      "name": "keyword.other.unit.suffix.floating-point.dp"
                    }
                  }
                },
                {
                  "match": "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([eE])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "constant.numeric.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "2": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "3": {
                      "name": "constant.numeric.decimal.point.dp"
                    },
                    "4": {
                      "name": "constant.numeric.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "5": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "6": {
                      "name": "keyword.other.unit.exponent.decimal.dp"
                    },
                    "7": {
                      "name": "keyword.operator.plus.exponent.decimal.dp"
                    },
                    "8": {
                      "name": "keyword.operator.minus.exponent.decimal.dp"
                    },
                    "9": {
                      "name": "constant.numeric.exponent.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "10": {
                      "name": "keyword.other.unit.suffix.floating-point.dp"
                    }
                  }
                },
                {
                  "match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.binary.dp"
                    },
                    "2": {
                      "name": "constant.numeric.binary.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.dp"
                    }
                  }
                },
                {
                  "match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.octal.dp"
                    },
                    "2": {
                      "name": "constant.numeric.octal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.dp"
                    }
                  }
                },
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([pP])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.dp"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "4": {
                      "name": "keyword.other.unit.exponent.hexadecimal.dp"
                    },
                    "5": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.dp"
                    },
                    "6": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.dp"
                    },
                    "7": {
                      "name": "constant.numeric.exponent.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "8": {
                      "name": "keyword.other.unit.suffix.integer.dp"
                    }
                  }
                },
                {
                  "match": "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([eE])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "constant.numeric.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "2": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "3": {
                      "name": "keyword.other.unit.exponent.decimal.dp"
                    },
                    "4": {
                      "name": "keyword.operator.plus.exponent.decimal.dp"
                    },
                    "5": {
                      "name": "keyword.operator.minus.exponent.decimal.dp"
                    },
                    "6": {
                      "name": "constant.numeric.exponent.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "7": {
                      "name": "keyword.other.unit.suffix.integer.dp"
                    }
                  }
                },
                {
                  "match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
                  "name": "invalid.illegal.constant.numeric.dp"
                }
              ]
            }
          ]
        }
      }
    },
    "decltype": {
      "begin": "((?<!\\w)decltype(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.dp keyword.other.decltype.dp storage.type.decltype.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.decltype.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.decltype.dp"
        }
      },
      "contentName": "meta.arguments.decltype",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "decltype_specifier": {
      "begin": "((?<!\\w)decltype(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.dp keyword.other.decltype.dp storage.type.decltype.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.decltype.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.decltype.dp"
        }
      },
      "contentName": "meta.arguments.decltype",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "default_statement": {
      "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)default(?!\\w))",
      "end": ":",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "keyword.control.default.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.separator.colon.case.default.dp"
        }
      },
      "name": "meta.conditional.case.dp",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "destructor_inline": {
      "begin": "^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*)(~(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=\\())",
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.function.definition.special.member.destructor.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "6": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "7": {
          "name": "comment.block.dp"
        },
        "8": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "9": {
          "name": "storage.type.modifier.calling-convention.dp"
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "12": {
          "name": "comment.block.dp"
        },
        "13": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "14": {
          "patterns": [
            {
              "include": "#functional_specifiers_pre_parameters"
            }
          ]
        },
        "15": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "16": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "17": {
          "name": "comment.block.dp"
        },
        "18": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "19": {
          "name": "entity.name.function.destructor.dp entity.name.function.definition.special.member.destructor.dp"
        }
      },
      "endCaptures": {
      },
      "name": "meta.function.definition.special.member.destructor.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.function.definition.special.member.destructor.dp"
            }
          },
          "name": "meta.head.function.definition.special.member.destructor.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "match": "(\\=)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(default)|(delete))",
              "captures": {
                "1": {
                  "name": "keyword.operator.assignment.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "6": {
                  "name": "keyword.other.default.constructor.dp"
                },
                "7": {
                  "name": "keyword.other.delete.constructor.dp"
                }
              }
            },
            {
              "begin": "\\(",
              "end": "\\)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.begin.bracket.round.special.member.destructor.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.end.bracket.round.special.member.destructor.dp"
                }
              },
              "contentName": "meta.function.definition.parameters.special.member.destructor",
              "patterns": [

              ]
            },
            {
              "match": "((?:(?:final)|(?:override)))+",
              "captures": {
                "1": {
                  "name": "keyword.operator.wordlike.dp keyword.operator.$1.dp"
                }
              }
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.function.definition.special.member.destructor.dp"
            }
          },
          "name": "meta.body.function.definition.special.member.destructor.dp",
          "patterns": [
            {
              "include": "#function_body_context"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.function.definition.special.member.destructor.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "destructor_root": {
      "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<12>?)+>)(?:\\s)*+)?::)*+)(((?>(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))::((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))~\\14((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\())",
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.function.definition.special.member.destructor.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "storage.type.modifier.calling-convention.dp"
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "8": {
          "name": "comment.block.dp"
        },
        "9": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.destructor.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.destructor.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "12": {
        },
        "13": {
          "patterns": [
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?=:)",
              "name": "entity.name.type.destructor.dp"
            },
            {
              "match": "(?<=:)~(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.function.definition.special.member.destructor.dp"
            },
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.destructor.dp"
            }
          ]
        },
        "14": {
        },
        "15": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "16": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "17": {
          "name": "comment.block.dp"
        },
        "18": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "20": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "21": {
          "name": "comment.block.dp"
        },
        "22": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "23": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "24": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "25": {
          "name": "comment.block.dp"
        },
        "26": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      },
      "endCaptures": {
      },
      "name": "meta.function.definition.special.member.destructor.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.function.definition.special.member.destructor.dp"
            }
          },
          "name": "meta.head.function.definition.special.member.destructor.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "match": "(\\=)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(default)|(delete))",
              "captures": {
                "1": {
                  "name": "keyword.operator.assignment.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "6": {
                  "name": "keyword.other.default.constructor.dp"
                },
                "7": {
                  "name": "keyword.other.delete.constructor.dp"
                }
              }
            },
            {
              "begin": "\\(",
              "end": "\\)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.begin.bracket.round.special.member.destructor.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.end.bracket.round.special.member.destructor.dp"
                }
              },
              "contentName": "meta.function.definition.parameters.special.member.destructor",
              "patterns": [

              ]
            },
            {
              "match": "((?:(?:final)|(?:override)))+",
              "captures": {
                "1": {
                  "name": "keyword.operator.wordlike.dp keyword.operator.$1.dp"
                }
              }
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.function.definition.special.member.destructor.dp"
            }
          },
          "name": "meta.body.function.definition.special.member.destructor.dp",
          "patterns": [
            {
              "include": "#function_body_context"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.function.definition.special.member.destructor.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "diagnostic": {
      "begin": "(^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?((?:error|warning)))\\b(?:(?:\\s)+)?",
      "end": "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.diagnostic.$7.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.definition.directive.dp"
        },
        "7": {
        }
      },
      "endCaptures": {
      },
      "name": "meta.preprocessor.diagnostic.$reference(directive).dp",
      "patterns": [
        {
          "begin": "\"",
          "end": "(?:(\")|(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$)))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.dp"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.dp"
            }
          },
          "name": "string.quoted.double.dp",
          "patterns": [
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "end": "(?:(')|(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$)))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.dp"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.dp"
            }
          },
          "name": "string.quoted.single.dp",
          "patterns": [
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "[^'\"]",
          "end": "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "string.unquoted.dp",
          "patterns": [
            {
              "include": "#line_continuation_character"
            },
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "emacs_file_banner": {
      "match": "(?:(^(?:(?:\\s)+)?((\\/\\/)(?:(?:\\s)+)?((?:[#;\\/=*C~]+)++(?![#;\\/=*C~]))(?:(?:\\s)+)?.+(?:(?:\\s)+)?\\4(?:(?:\\s)+)?(?:\\n|$)))|(^(?:(?:\\s)+)?((\\/\\*)(?:(?:\\s)+)?((?:[#;\\/=*C~]+)++(?![#;\\/=*C~]))(?:(?:\\s)+)?.+(?:(?:\\s)+)?\\8(?:(?:\\s)+)?\\*\\/)))",
      "captures": {
        "1": {
          "name": "meta.toc-list.banner.double-slash.dp"
        },
        "2": {
          "name": "comment.line.double-slash.dp"
        },
        "3": {
          "name": "punctuation.definition.comment.dp"
        },
        "4": {
          "name": "meta.banner.character.dp"
        },
        "5": {
          "name": "meta.toc-list.banner.block.dp"
        },
        "6": {
          "name": "comment.line.banner.dp"
        },
        "7": {
          "name": "punctuation.definition.comment.dp"
        },
        "8": {
          "name": "meta.banner.character.dp"
        }
      }
    },
    "empty_square_brackets": {
      "name": "storage.modifier.array.bracket.square",
      "match": "(?<!delete)\\[(?:(?:\\s)+)?\\]"
    },
    "enum_block": {
      "begin": "((?<!\\w)enum(?!\\w))(?:(?:\\s)+(Struct|type))?(?:(?:(?:\\s)+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))(?:(?:\\s)+)?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)(?:(?:(?:\\s)+)?(:)(?:(?:\\s)+)?(?:((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<12>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<12>?)+>)(?:\\s)*+)?(::))?(?:(?:\\s)+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))?",
      "end": "(?:(?:(?<=\\}|%>|\\?\\?>)(?:(?:\\s)+)?(;)|(;))|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.enum.dp"
        },
        "1": {
          "name": "storage.type.enum.dp"
        },
        "2": {
          "name": "storage.type.enum.enum-key.$2.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "4": {
          "name": "entity.name.type.enum.dp"
        },
        "5": {
          "name": "punctuation.separator.colon.type-specifier.dp"
        },
        "6": {
          "patterns": [
            {
              "include": "#scope_resolution_inner_generated"
            }
          ]
        },
        "7": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
        },
        "8": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "9": {
        },
        "10": {
          "name": "entity.name.scope-resolution.dp"
        },
        "11": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "12": {
        },
        "13": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
        },
        "14": {
          "name": "storage.type.integral.$14.dp"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.dp"
        },
        "2": {
          "name": "punctuation.terminator.statement.dp"
        }
      },
      "name": "meta.block.enum.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.enum.dp"
            }
          },
          "name": "meta.head.enum.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.enum.dp"
            }
          },
          "name": "meta.body.enum.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "include": "#enumerator_list"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#semicolon"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.enum.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "enum_declare": {
      "match": "((?<!\\w)enum(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\S)(?![:{a-zA-Z])",
      "captures": {
        "1": {
          "name": "storage.type.enum.declare.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.type.enum.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "name": "variable.other.object.declare.dp"
        },
        "13": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "14": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "enumerator_list": {
      "match": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(?:\\s)+)?((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?(?:(?:\\s)+)?(?:(\\=)(?:(?:\\s)+)?(.+?)(?:(?:\\s)+)?)?(?:(?:((?:[,;](?!')|\\n))|(?=\\}[^']))|(?=(?:\\/\\/|\\/\\*)))",
      "captures": {
        "1": {
          "name": "variable.other.enummember.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "3": {
          "name": "keyword.operator.assignment.dp"
        },
        "4": {
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#comma"
            },
            {
              "include": "#semicolon"
            }
          ]
        }
      },
      "name": "meta.enum.definition.dp"
    },
    "evaluation_context": {
      "patterns": [
        {
          "include": "#ever_present_context"
        },
        {
          "include": "#string_context"
        },
        {
          "include": "#number_literal"
        },
        {
          "include": "#method_access"
        },
        {
          "include": "#member_access"
        },
        {
          "include": "#predefined_macros"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#memory_operators"
        },
        {
          "include": "#wordlike_operators"
        },
        {
          "include": "#type_casting_operators"
        },
        {
          "include": "#control_flow_keywords"
        },
        {
          "include": "#exception_keywords"
        },
        {
          "include": "#the_this_keyword"
        },
        {
          "include": "#language_constants"
        },
        {
          "include": "#builtin_storage_type_initilizer"
        },
        {
          "include": "#qualifiers_and_specifiers_post_parameters"
        },
        {
          "include": "#functional_specifiers_pre_parameters"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#lambdas"
        },
        {
          "include": "#attributes_context"
        },
        {
          "include": "#parentheses"
        },
        {
          "include": "#function_call"
        },
        {
          "include": "#scope_resolution_inner_generated"
        },
        {
          "include": "#square_brackets"
        },
        {
          "include": "#semicolon"
        },
        {
          "include": "#comma"
        }
      ]
    },
    "ever_present_context": {
      "patterns": [
        {
          "include": "#pragma_mark"
        },
        {
          "include": "#pragma"
        },
        {
          "include": "#include"
        },
        {
          "include": "#line"
        },
        {
          "include": "#diagnostic"
        },
        {
          "include": "#undef"
        },
        {
          "include": "#preprocessor_conditional_range"
        },
        {
          "include": "#single_line_macro"
        },
        {
          "include": "#macro"
        },
        {
          "include": "#preprocessor_conditional_standalone"
        },
        {
          "include": "#macro_argument"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    "exception_keywords": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:(?:throw)|(?:catch)|(?:try))(?!\\w))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "keyword.control.exception.$3.dp"
        }
      }
    },
    "extern_block": {
      "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(extern)(?=\\s*\\\")",
      "end": "(?:(?:(?<=\\}|%>|\\?\\?>)(?:(?:\\s)+)?(;)|(;))|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.extern.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "storage.type.extern.dp"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.dp"
        },
        "2": {
          "name": "punctuation.terminator.statement.dp"
        }
      },
      "name": "meta.block.extern.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.extern.dp"
            }
          },
          "name": "meta.head.extern.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.extern.dp"
            }
          },
          "name": "meta.body.extern.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.extern.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "include": "$self"
        }
      ]
    },
    "function_body_context": {
      "patterns": [
        {
          "include": "#ever_present_context"
        },
        {
          "include": "#using_namespace"
        },
        {
          "include": "#type_alias"
        },
        {
          "include": "#using_name"
        },
        {
          "include": "#namespace_alias"
        },
        {
          "include": "#typedef_class"
        },
        {
          "include": "#typedef_struct"
        },
        {
          "include": "#typedef_union"
        },
        {
          "include": "#misc_keywords"
        },
        {
          "include": "#standard_declares"
        },
        {
          "include": "#class_block"
        },
        {
          "include": "#struct_block"
        },
        {
          "include": "#union_block"
        },
        {
          "include": "#enum_block"
        },
        {
          "include": "#access_control_keywords"
        },
        {
          "include": "#block"
        },
        {
          "include": "#static_assert"
        },
        {
          "include": "#assembly"
        },
        {
          "include": "#function_pointer"
        },
        {
          "include": "#switch_statement"
        },
        {
          "include": "#goto_statement"
        },
        {
          "include": "#evaluation_context"
        },
        {
          "include": "#label"
        }
      ]
    },
    "function_call": {
      "begin": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<11>?)+>)(?:\\s)*+)?::)*\\s*+)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)\\b(?<!\\Wreinterpret_cast|^reinterpret_cast|\\Watomic_noexcept|^atomic_noexcept|\\Wuint_least16_t|^uint_least16_t|\\Wuint_least32_t|^uint_least32_t|\\Wuint_least64_t|^uint_least64_t|\\Watomic_cancel|^atomic_cancel|\\Watomic_commit|^atomic_commit|\\Wuint_least8_t|^uint_least8_t|\\Wuint_fast16_t|^uint_fast16_t|\\Wuint_fast32_t|^uint_fast32_t|\\Wint_least16_t|^int_least16_t|\\Wint_least32_t|^int_least32_t|\\Wint_least64_t|^int_least64_t|\\Wuint_fast64_t|^uint_fast64_t|\\Wthread_local|^thread_local|\\Wint_fast16_t|^int_fast16_t|\\Wint_fast32_t|^int_fast32_t|\\Wint_fast64_t|^int_fast64_t|\\Wsynchronized|^synchronized|\\Wuint_fast8_t|^uint_fast8_t|\\Wdynamic_cast|^dynamic_cast|\\Wint_least8_t|^int_least8_t|\\Wint_fast8_t|^int_fast8_t|\\Wstatic_cast|^static_cast|\\Wsuseconds_t|^suseconds_t|\\Wconst_cast|^const_cast|\\Wuseconds_t|^useconds_t|\\Wconstinit|^constinit|\\Wco_return|^co_return|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wconstexpr|^constexpr|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wprotected|^protected|\\Wnamespace|^namespace|\\Wblksize_t|^blksize_t|\\Wco_return|^co_return|\\Win_addr_t|^in_addr_t|\\Win_port_t|^in_port_t|\\Wuintptr_t|^uintptr_t|\\Wtemplate|^template|\\Wnoexcept|^noexcept|\\Wnoexcept|^noexcept|\\Wcontinue|^continue|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wunsigned|^unsigned|\\Wu_quad_t|^u_quad_t|\\Wblkcnt_t|^blkcnt_t|\\Wuint16_t|^uint16_t|\\Wuint32_t|^uint32_t|\\Wuint64_t|^uint64_t|\\Wintptr_t|^intptr_t|\\Wintmax_t|^intmax_t|\\Wintmax_t|^intmax_t|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wexplicit|^explicit|\\Wvolatile|^volatile|\\Wnoexcept|^noexcept|\\Woperator|^operator|\\Wdecltype|^decltype|\\Wtypename|^typename|\\Wrequires|^requires|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wreflexpr|^reflexpr|\\Wswblk_t|^swblk_t|\\Wvirtual|^virtual|\\Wssize_t|^ssize_t|\\Wconcept|^concept|\\Wmutable|^mutable|\\Wfixpt_t|^fixpt_t|\\Wint16_t|^int16_t|\\Wint32_t|^int32_t|\\Wint64_t|^int64_t|\\Wuint8_t|^uint8_t|\\Wtypedef|^type|\\Wdaddr_t|^daddr_t|\\Wcaddr_t|^caddr_t|\\Wqaddr_t|^qaddr_t|\\Wdefault|^default|\\Wnlink_t|^nlink_t|\\Wsegsz_t|^segsz_t|\\Wu_short|^u_short|\\Wwchar_t|^wchar_t|\\Wprivate|^private|\\W__asm__|^__asm__|\\Walignas|^alignas|\\Walignof|^alignof|\\Wmutable|^mutable|\\Wnullptr|^nullptr|\\Wclock_t|^clock_t|\\Wmode_t|^mode_t|\\Wpublic|^public|\\Wsize_t|^size_t|\\Wdouble|^double|\\Wquad_t|^quad_t|\\Wstatic|^static|\\Wtime_t|^time_t|\\Wmodule|^module|\\Wimport|^import|\\Wexport|^export|\\Wextern|^extern|\\Winline|^inline|\\Wxor_eq|^xor_eq|\\Wand_eq|^and_eq|\\Wreturn|^return|\\Wfriend|^friend|\\Wnot_eq|^not_eq|\\Wsigned|^signed|\\Wstruct|^type|\\Wint8_t|^int8_t|\\Wushort|^ushort|\\Wswitch|^switch|\\Wu_long|^u_long|\\Wtypeid|^typeid|\\Wu_char|^u_char|\\Wsizeof|^sizeof|\\Wbitand|^bitand|\\Wdelete|^delete|\\Wino_t|^ino_t|\\Wkey_t|^key_t|\\Wpid_t|^pid_t|\\Woff_t|^off_t|\\Wuid_t|^uid_t|\\Wshort|^short|\\Wbreak|^break|\\Wcatch|^catch|\\Wcompl|^compl|\\Wwhile|^while|\\Wfalse|^false|\\Wclass|^Struct|\\Wunion|^union|\\Wconst|^const|\\Wor_eq|^or_eq|\\Wconst|^const|\\Wthrow|^throw|\\Wbitor|^bitor|\\Wu_int|^u_int|\\Wusing|^using|\\Wdiv_t|^div_t|\\Wdev_t|^dev_t|\\Wgid_t|^gid_t|\\Wfloat|^float|\\Wlong|^long|\\Wgoto|^goto|\\Wuint|^uint|\\Wid_t|^id_t|\\Wcase|^case|\\Wauto|^auto|\\Wvoid|^void|\\Wenum|^enum|\\Wtrue|^true|\\Wchar|^char|\\Wid_t|^id_t|\\WNULL|^NULL|\\Wthis|^this|\\Wbool|^bool|\\Welse|^else|\\Wfor|^for|\\Wnew|^new|\\Wnot|^not|\\Wxor|^xor|\\Wand|^and|\\Wasm|^asm|\\Wint|^int|\\Wtry|^try|\\Wdo|^do|\\Wif|^if|\\Wor|^or)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<11>?)+>)(?:\\s)*+)?(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_function_call_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.call.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.function.call.dp"
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "8": {
          "name": "comment.block.dp"
        },
        "9": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "10": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "11": {
        },
        "12": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.call.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.function.call.dp"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "function_definition": {
      "begin": "(?:(?:^|\\G|(?<=;|\\}))|(?<=>))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:((?<!\\w)template(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?<!\\w)(?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))|(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*)(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<60>?)+>)(?:\\s)*+)?::)*+)?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<60>?)+>)?(?![\\w<:.]))(((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<60>?)+>)(?:\\s)*+)?::)*\\s*+)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)\\b(?<!\\Wreinterpret_cast|^reinterpret_cast|\\Watomic_noexcept|^atomic_noexcept|\\Wuint_least16_t|^uint_least16_t|\\Wuint_least32_t|^uint_least32_t|\\Wuint_least64_t|^uint_least64_t|\\Watomic_cancel|^atomic_cancel|\\Watomic_commit|^atomic_commit|\\Wuint_least8_t|^uint_least8_t|\\Wuint_fast16_t|^uint_fast16_t|\\Wuint_fast32_t|^uint_fast32_t|\\Wint_least16_t|^int_least16_t|\\Wint_least32_t|^int_least32_t|\\Wint_least64_t|^int_least64_t|\\Wuint_fast64_t|^uint_fast64_t|\\Wthread_local|^thread_local|\\Wint_fast16_t|^int_fast16_t|\\Wint_fast32_t|^int_fast32_t|\\Wint_fast64_t|^int_fast64_t|\\Wsynchronized|^synchronized|\\Wuint_fast8_t|^uint_fast8_t|\\Wdynamic_cast|^dynamic_cast|\\Wint_least8_t|^int_least8_t|\\Wint_fast8_t|^int_fast8_t|\\Wstatic_cast|^static_cast|\\Wsuseconds_t|^suseconds_t|\\Wconst_cast|^const_cast|\\Wuseconds_t|^useconds_t|\\Wconstinit|^constinit|\\Wco_return|^co_return|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wconstexpr|^constexpr|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wprotected|^protected|\\Wnamespace|^namespace|\\Wblksize_t|^blksize_t|\\Wco_return|^co_return|\\Win_addr_t|^in_addr_t|\\Win_port_t|^in_port_t|\\Wuintptr_t|^uintptr_t|\\Wtemplate|^template|\\Wnoexcept|^noexcept|\\Wnoexcept|^noexcept|\\Wcontinue|^continue|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wunsigned|^unsigned|\\Wu_quad_t|^u_quad_t|\\Wblkcnt_t|^blkcnt_t|\\Wuint16_t|^uint16_t|\\Wuint32_t|^uint32_t|\\Wuint64_t|^uint64_t|\\Wintptr_t|^intptr_t|\\Wintmax_t|^intmax_t|\\Wintmax_t|^intmax_t|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wexplicit|^explicit|\\Wvolatile|^volatile|\\Wnoexcept|^noexcept|\\Woperator|^operator|\\Wdecltype|^decltype|\\Wtypename|^typename|\\Wrequires|^requires|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wreflexpr|^reflexpr|\\Wswblk_t|^swblk_t|\\Wvirtual|^virtual|\\Wssize_t|^ssize_t|\\Wconcept|^concept|\\Wmutable|^mutable|\\Wfixpt_t|^fixpt_t|\\Wint16_t|^int16_t|\\Wint32_t|^int32_t|\\Wint64_t|^int64_t|\\Wuint8_t|^uint8_t|\\Wtypedef|^type|\\Wdaddr_t|^daddr_t|\\Wcaddr_t|^caddr_t|\\Wqaddr_t|^qaddr_t|\\Wdefault|^default|\\Wnlink_t|^nlink_t|\\Wsegsz_t|^segsz_t|\\Wu_short|^u_short|\\Wwchar_t|^wchar_t|\\Wprivate|^private|\\W__asm__|^__asm__|\\Walignas|^alignas|\\Walignof|^alignof|\\Wmutable|^mutable|\\Wnullptr|^nullptr|\\Wclock_t|^clock_t|\\Wmode_t|^mode_t|\\Wpublic|^public|\\Wsize_t|^size_t|\\Wdouble|^double|\\Wquad_t|^quad_t|\\Wstatic|^static|\\Wtime_t|^time_t|\\Wmodule|^module|\\Wimport|^import|\\Wexport|^export|\\Wextern|^extern|\\Winline|^inline|\\Wxor_eq|^xor_eq|\\Wand_eq|^and_eq|\\Wreturn|^return|\\Wfriend|^friend|\\Wnot_eq|^not_eq|\\Wsigned|^signed|\\Wstruct|^type|\\Wint8_t|^int8_t|\\Wushort|^ushort|\\Wswitch|^switch|\\Wu_long|^u_long|\\Wtypeid|^typeid|\\Wu_char|^u_char|\\Wsizeof|^sizeof|\\Wbitand|^bitand|\\Wdelete|^delete|\\Wino_t|^ino_t|\\Wkey_t|^key_t|\\Wpid_t|^pid_t|\\Woff_t|^off_t|\\Wuid_t|^uid_t|\\Wshort|^short|\\Wbreak|^break|\\Wcatch|^catch|\\Wcompl|^compl|\\Wwhile|^while|\\Wfalse|^false|\\Wclass|^Struct|\\Wunion|^union|\\Wconst|^const|\\Wor_eq|^or_eq|\\Wconst|^const|\\Wthrow|^throw|\\Wbitor|^bitor|\\Wu_int|^u_int|\\Wusing|^using|\\Wdiv_t|^div_t|\\Wdev_t|^dev_t|\\Wgid_t|^gid_t|\\Wfloat|^float|\\Wlong|^long|\\Wgoto|^goto|\\Wuint|^uint|\\Wid_t|^id_t|\\Wcase|^case|\\Wauto|^auto|\\Wvoid|^void|\\Wenum|^enum|\\Wtrue|^true|\\Wchar|^char|\\Wid_t|^id_t|\\WNULL|^NULL|\\Wthis|^this|\\Wbool|^bool|\\Welse|^else|\\Wfor|^for|\\Wnew|^new|\\Wnot|^not|\\Wxor|^xor|\\Wand|^and|\\Wasm|^asm|\\Wint|^int|\\Wtry|^try|\\Wdo|^do|\\Wif|^if|\\Wor|^or)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\()",
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.function.definition.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "storage.type.template.dp"
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "8": {
          "name": "comment.block.dp"
        },
        "9": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "((?<!\\w)(?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))|(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))",
              "captures": {
                "1": {
                  "name": "storage.modifier.$1.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "name": "storage.modifier.$12.dp"
        },
        "13": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "14": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "15": {
          "name": "comment.block.dp"
        },
        "16": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "17": {
          "name": "meta.qualified_type.dp",
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "18": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "20": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "21": {
          "name": "comment.block.dp"
        },
        "22": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "23": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "24": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "25": {
          "name": "comment.block.dp"
        },
        "26": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "27": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "28": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "29": {
        },
        "30": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "31": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "32": {
          "name": "comment.block.dp"
        },
        "33": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "34": {
        },
        "35": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "36": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "37": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "38": {
          "name": "comment.block.dp"
        },
        "39": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "40": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "41": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "42": {
          "name": "comment.block.dp"
        },
        "43": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "44": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "45": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "46": {
          "name": "comment.block.dp"
        },
        "47": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "48": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "49": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "50": {
          "name": "comment.block.dp"
        },
        "51": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "52": {
          "name": "storage.type.modifier.calling-convention.dp"
        },
        "53": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "54": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "55": {
          "name": "comment.block.dp"
        },
        "56": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "57": {
          "patterns": [
            {
              "include": "#scope_resolution_function_definition_inner_generated"
            }
          ]
        },
        "58": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.definition.dp"
        },
        "59": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "60": {
        },
        "61": {
          "name": "entity.name.function.definition.dp"
        },
        "62": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "63": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "64": {
          "name": "comment.block.dp"
        },
        "65": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      },
      "endCaptures": {
      },
      "name": "meta.function.definition.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.function.definition.dp"
            }
          },
          "name": "meta.head.function.definition.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "begin": "\\(",
              "end": "\\)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.begin.bracket.round.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.end.bracket.round.dp"
                }
              },
              "contentName": "meta.function.definition.parameters",
              "patterns": [
                {
                  "include": "#ever_present_context"
                },
                {
                  "include": "#parameter_or_maybe_value"
                },
                {
                  "include": "#comma"
                },
                {
                  "include": "#evaluation_context"
                }
              ]
            },
            {
              "match": "(?<=^|\\))(?:(?:\\s)+)?(->)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<23>?)+>)(?:\\s)*+)?::)*+)?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<23>?)+>)?(?![\\w<:.]))",
              "captures": {
                "1": {
                  "name": "punctuation.definition.function.return-type.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "6": {
                  "name": "meta.qualified_type.dp",
                  "patterns": [
                    {
                      "match": "::",
                      "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
                    },
                    {
                      "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
                      "name": "storage.type.$0.dp"
                    },
                    {
                      "include": "#attributes_context"
                    },
                    {
                      "include": "#storage_types"
                    },
                    {
                      "include": "#number_literal"
                    },
                    {
                      "include": "#string_context"
                    },
                    {
                      "include": "#comma"
                    },
                    {
                      "include": "#scope_resolution_inner_generated"
                    },
                    {
                      "begin": "<",
                      "end": ">",
                      "beginCaptures": {
                        "0": {
                          "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                        }
                      },
                      "endCaptures": {
                        "0": {
                          "name": "punctuation.section.angle-brackets.end.template.call.dp"
                        }
                      },
                      "name": "meta.template.call.dp",
                      "patterns": [
                        {
                          "include": "#template_call_context"
                        }
                      ]
                    },
                    {
                      "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
                      "name": "entity.name.type.dp"
                    }
                  ]
                },
                "7": {
                  "patterns": [
                    {
                      "include": "#attributes_context"
                    },
                    {
                      "include": "#number_literal"
                    }
                  ]
                },
                "8": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "9": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "10": {
                  "name": "comment.block.dp"
                },
                "11": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "12": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "13": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "14": {
                  "name": "comment.block.dp"
                },
                "15": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "16": {
                  "patterns": [
                    {
                      "match": "::",
                      "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
                    },
                    {
                      "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
                      "name": "entity.name.scope-resolution.type.dp"
                    },
                    {
                      "include": "#template_call_range"
                    }
                  ]
                },
                "17": {
                  "patterns": [
                    {
                      "include": "#template_call_range"
                    }
                  ]
                },
                "18": {
                },
                "19": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "20": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "21": {
                  "name": "comment.block.dp"
                },
                "22": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "23": {
                }
              }
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.function.definition.dp"
            }
          },
          "name": "meta.body.function.definition.dp",
          "patterns": [
            {
              "include": "#function_body_context"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.function.definition.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "function_parameter_context": {
      "patterns": [
        {
          "include": "#ever_present_context"
        },
        {
          "include": "#string_context"
        },
        {
          "include": "#parameter"
        },
        {
          "include": "#comma"
        }
      ]
    },
    "function_pointer": {
      "begin": "(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<18>?)+>)(?:\\s)*+)?::)*+)?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<18>?)+>)?(?![\\w<:.]))(((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()(\\*)(?:(?:\\s)+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:(?:\\s)+)?(?:(\\[)(\\w*)(\\])(?:(?:\\s)+)?)*(\\))(?:(?:\\s)+)?(\\()",
      "end": "(\\))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=[{=,);>]|\\n)(?!\\()",
      "beginCaptures": {
        "1": {
          "name": "meta.qualified_type.dp",
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "4": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "5": {
          "name": "comment.block.dp"
        },
        "6": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "8": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "9": {
          "name": "comment.block.dp"
        },
        "10": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "13": {
        },
        "14": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "15": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "16": {
          "name": "comment.block.dp"
        },
        "17": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "18": {
        },
        "19": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "21": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "22": {
          "name": "comment.block.dp"
        },
        "23": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "24": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "25": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "26": {
          "name": "comment.block.dp"
        },
        "27": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "28": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "29": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "30": {
          "name": "comment.block.dp"
        },
        "31": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "32": {
          "name": "punctuation.section.parens.begin.bracket.round.function.pointer.dp"
        },
        "33": {
          "name": "punctuation.definition.function.pointer.dereference.dp"
        },
        "34": {
          "name": "variable.other.definition.pointer.function.dp"
        },
        "35": {
          "name": "punctuation.definition.begin.bracket.square.dp"
        },
        "36": {
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        "37": {
          "name": "punctuation.definition.end.bracket.square.dp"
        },
        "38": {
          "name": "punctuation.section.parens.end.bracket.round.function.pointer.dp"
        },
        "39": {
          "name": "punctuation.section.parameters.begin.bracket.round.function.pointer.dp"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parameters.end.bracket.round.function.pointer.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#function_parameter_context"
        }
      ]
    },
    "function_pointer_parameter": {
      "begin": "(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<18>?)+>)(?:\\s)*+)?::)*+)?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<18>?)+>)?(?![\\w<:.]))(((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()(\\*)(?:(?:\\s)+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:(?:\\s)+)?(?:(\\[)(\\w*)(\\])(?:(?:\\s)+)?)*(\\))(?:(?:\\s)+)?(\\()",
      "end": "(\\))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=[{=,);>]|\\n)(?!\\()",
      "beginCaptures": {
        "1": {
          "name": "meta.qualified_type.dp",
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "4": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "5": {
          "name": "comment.block.dp"
        },
        "6": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "8": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "9": {
          "name": "comment.block.dp"
        },
        "10": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "13": {
        },
        "14": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "15": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "16": {
          "name": "comment.block.dp"
        },
        "17": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "18": {
        },
        "19": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "21": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "22": {
          "name": "comment.block.dp"
        },
        "23": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "24": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "25": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "26": {
          "name": "comment.block.dp"
        },
        "27": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "28": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "29": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "30": {
          "name": "comment.block.dp"
        },
        "31": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "32": {
          "name": "punctuation.section.parens.begin.bracket.round.function.pointer.dp"
        },
        "33": {
          "name": "punctuation.definition.function.pointer.dereference.dp"
        },
        "34": {
          "name": "variable.parameter.pointer.function.dp"
        },
        "35": {
          "name": "punctuation.definition.begin.bracket.square.dp"
        },
        "36": {
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        "37": {
          "name": "punctuation.definition.end.bracket.square.dp"
        },
        "38": {
          "name": "punctuation.section.parens.end.bracket.round.function.pointer.dp"
        },
        "39": {
          "name": "punctuation.section.parameters.begin.bracket.round.function.pointer.dp"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parameters.end.bracket.round.function.pointer.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#function_parameter_context"
        }
      ]
    },
    "functional_specifiers_pre_parameters": {
      "match": "(?<!\\w)(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))(?!\\w)",
      "name": "storage.modifier.specifier.functional.pre-parameters.$0.dp"
    },
    "gcc_attributes": {
      "begin": "__attribute(?:__)?\\s*\\(\\s*\\(",
      "end": "\\)\\s*\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.attribute.begin.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.attribute.end.dp"
        }
      },
      "name": "support.other.attribute.dp",
      "patterns": [
        {
          "include": "#attributes_context"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#string_context"
            }
          ]
        },
        {
          "match": "(using)(?:\\s)+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))",
          "captures": {
            "1": {
              "name": "keyword.other.using.directive.dp"
            },
            "2": {
              "name": "entity.name.namespace.dp"
            }
          }
        },
        {
          "match": ",",
          "name": "punctuation.separator.attribute.dp"
        },
        {
          "match": ":",
          "name": "punctuation.accessor.attribute.dp"
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)",
          "name": "entity.name.namespace.dp"
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
          "name": "entity.other.attribute.$0.dp"
        },
        {
          "include": "#number_literal"
        }
      ]
    },
    "goto_statement": {
      "match": "((?<!\\w)goto(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)",
      "captures": {
        "1": {
          "name": "keyword.control.goto.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.label.call.dp"
        }
      }
    },
    "identifier": {
      "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*"
    },
    "include": {
      "match": "^((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((#)(?:(?:\\s)+)?((?:include|include_next))\\b)(?:(?:\\s)+)?(?:(?:(?:((<)[^>]*(>?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:\\n)|$)|(?=\\/\\/)))|((\\\")[^\\\"]*((?:\\\")?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:\\n)|$)|(?=\\/\\/))))|(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:\\.(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)*((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:\\n)|$)|(?=(?:\\/\\/|;)))))|((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:\\n)|$)|(?=(?:\\/\\/|;))))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "keyword.control.directive.$5.dp"
        },
        "4": {
          "name": "punctuation.definition.directive.dp"
        },
        "6": {
          "name": "string.quoted.other.lt-gt.include.dp"
        },
        "7": {
          "name": "punctuation.definition.string.begin.dp"
        },
        "8": {
          "name": "punctuation.definition.string.end.dp"
        },
        "9": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "11": {
          "name": "string.quoted.double.include.dp"
        },
        "12": {
          "name": "punctuation.definition.string.begin.dp"
        },
        "13": {
          "name": "punctuation.definition.string.end.dp"
        },
        "14": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "15": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "16": {
          "name": "entity.name.other.preprocessor.macro.include.dp"
        },
        "17": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "18": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "21": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "22": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "name": "meta.preprocessor.include.dp"
    },
    "inheritance_context": {
      "patterns": [
        {
          "include": "#ever_present_context"
        },
        {
          "match": ",",
          "name": "punctuation.separator.delimiter.comma.inheritance.dp"
        },
        {
          "match": "(?<!\\w)(?:(?:protected)|(?:private)|(?:public))(?!\\w)",
          "name": "storage.type.modifier.access.$0.dp"
        },
        {
          "match": "(?<!\\w)virtual(?!\\w)",
          "name": "storage.type.modifier.virtual.dp"
        },
        {
          "match": "(?<=protected|virtual|private|public|,|:)(?:(?:\\s)+)?(?!(?:(?:(?:protected)|(?:private)|(?:public))|virtual))(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<12>?)+>)(?:\\s)*+)?::)*+)?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<12>?)+>)?(?![\\w<:.]))",
          "captures": {
            "1": {
              "name": "meta.qualified_type.dp",
              "patterns": [
                {
                  "match": "::",
                  "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
                },
                {
                  "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
                  "name": "storage.type.$0.dp"
                },
                {
                  "include": "#attributes_context"
                },
                {
                  "include": "#storage_types"
                },
                {
                  "include": "#number_literal"
                },
                {
                  "include": "#string_context"
                },
                {
                  "include": "#comma"
                },
                {
                  "include": "#scope_resolution_inner_generated"
                },
                {
                  "begin": "<",
                  "end": ">",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                    }
                  },
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.section.angle-brackets.end.template.call.dp"
                    }
                  },
                  "name": "meta.template.call.dp",
                  "patterns": [
                    {
                      "include": "#template_call_context"
                    }
                  ]
                },
                {
                  "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
                  "name": "entity.name.type.dp"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "#attributes_context"
                },
                {
                  "include": "#number_literal"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "4": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "5": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "match": "::",
                  "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
                },
                {
                  "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
                  "name": "entity.name.scope-resolution.type.dp"
                },
                {
                  "include": "#template_call_range"
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#template_call_range"
                }
              ]
            },
            "9": {
            },
            "10": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "12": {
            }
          }
        }
      ]
    },
    "inline_builtin_storage_type": {
      "match": "(?:\\s)*+(?<!\\w)(?:(?:(?:((?:(?:Type)|(?:i8)|(?:i16)|(?:i32)|(?:i64)|(?:u8)|(?:u16)|(?:u32)|(?:u64)|(?:f32)|(?:f64)|(?:I8)|(?:I16)|(?:I32)|(?:I64)|(?:U8)|(?:U16)|(?:U32)|(?:U64)|(?:F32)|(?:F64)|(?:This)|(?:Int)|(?:Bool)|(?:Char)|(?:String)|(?:let)|(?:mut)|(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_](?:\\w)*_t))(?!\\w)",
      "captures": {
        "1": {
          "name": "storage.type.primitive.dp storage.type.built-in.primitive.dp"
        },
        "2": {
          "name": "storage.type.dp storage.type.built-in.dp"
        },
        "3": {
          "name": "support.type.posix-reserved.pthread.dp support.type.built-in.posix-reserved.pthread.dp"
        },
        "4": {
          "name": "support.type.posix-reserved.dp support.type.built-in.posix-reserved.dp"
        }
      }
    },
    "inline_comment": {
      "match": "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))",
      "captures": {
        "1": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "2": {
          "name": "comment.block.dp"
        },
        "3": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      }
    },
    "invalid_comment_end": {
      "match": "\\*\\/",
      "name": "invalid.illegal.unexpected.punctuation.definition.comment.end.dp"
    },
    "label": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\b(?<!case|default)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(:)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "entity.name.label.dp"
        },
        "4": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "6": {
          "name": "punctuation.separator.label.dp"
        }
      }
    },
    "lambdas": {
      "begin": "(?:(?<=[^\\s]|^)(?<![\\w\\]\\)\\[\\*&\">])|(?<=\\Wreturn|^return))(?:(?:\\s)+)?(\\[(?!\\[| *+\"| *+\\d))((?:[^\\[\\]]|((?<!\\[)\\[(?!\\[)(?:[^\\[\\]]*+\\g<3>?)++\\]))*+)(\\](?!((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))[\\[\\];]))",
      "end": "(?<=[;}])",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.capture.begin.lambda.dp"
        },
        "2": {
          "name": "meta.lambda.capture.dp",
          "patterns": [
            {
              "include": "#the_this_keyword"
            },
            {
              "match": "((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?=\\]|\\z|$)|(,))|(\\=))",
              "captures": {
                "1": {
                  "name": "variable.parameter.capture.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "6": {
                  "name": "punctuation.separator.delimiter.comma.dp"
                },
                "7": {
                  "name": "keyword.operator.assignment.dp"
                }
              }
            },
            {
              "include": "#evaluation_context"
            }
          ]
        },
        "3": {
        },
        "4": {
          "name": "punctuation.definition.capture.end.lambda.dp"
        },
        "5": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "6": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "7": {
          "name": "comment.block.dp"
        },
        "8": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      },
      "endCaptures": {
      },
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.begin.lambda.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.lambda.dp"
            }
          },
          "name": "meta.function.definition.parameters.lambda.dp",
          "patterns": [
            {
              "include": "#function_parameter_context"
            }
          ]
        },
        {
          "match": "(?<!\\w)(?:(?:constexpr)|(?:consteval)|(?:mutable))(?!\\w)",
          "name": "storage.modifier.lambda.$0.dp"
        },
        {
          "match": "(->)((?:.+?(?=\\{|$))?)",
          "captures": {
            "1": {
              "name": "punctuation.definition.lambda.return-type.dp"
            },
            "2": {
              "name": "storage.type.return-type.lambda.dp"
            }
          }
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.lambda.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.lambda.dp"
            }
          },
          "name": "meta.function.definition.body.lambda.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "language_constants": {
      "match": "(?<!\\w)(?:(?:nullptr)|(?:false)|(?:NULL)|(?:true))(?!\\w)",
      "name": "constant.language.$0.dp"
    },
    "line": {
      "begin": "^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?line\\b",
      "end": "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.directive.line.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "punctuation.definition.directive.dp"
        }
      },
      "endCaptures": {
      },
      "name": "meta.preprocessor.line.dp",
      "patterns": [
        {
          "include": "#string_context"
        },
        {
          "include": "#preprocessor_number_literal"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    "line_comment": {
      "begin": "\\s*+(\\/\\/)",
      "end": "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.dp"
        }
      },
      "endCaptures": {
      },
      "name": "comment.line.double-slash.dp",
      "patterns": [
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    "line_continuation_character": {
      "match": "\\\\\\n",
      "name": "constant.character.escape.line-continuation.dp"
    },
    "macro": {
      "begin": "(^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?define\\b)(?:(?:\\s)+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))",
      "end": "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.define.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.definition.directive.dp"
        },
        "7": {
          "name": "entity.name.function.preprocessor.dp"
        }
      },
      "endCaptures": {
      },
      "name": "meta.preprocessor.macro.dp",
      "patterns": [
        {
          "match": "\\G(?:(?:\\s)+)?(\\()([^\\(]*)(\\))",
          "captures": {
            "1": {
              "name": "punctuation.definition.parameters.begin.preprocessor.dp"
            },
            "2": {
              "name": "meta.function.preprocessor.parameters.dp",
              "patterns": [
                {
                  "match": "(?<=[(,])(?:(?:\\s)+)?((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:(?:\\s)+)?",
                  "captures": {
                    "1": {
                      "name": "variable.parameter.preprocessor.dp"
                    }
                  }
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.parameters.dp"
                },
                {
                  "match": "\\.\\.\\.",
                  "name": "punctuation.vararg-ellipses.variable.parameter.preprocessor.dp"
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.parameters.end.preprocessor.dp"
            }
          }
        },
        {
          "include": "#macro_context"
        },
        {
          "include": "#macro_argument"
        }
      ]
    },
    "macro_argument": {
      "match": "##?(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
      "name": "variable.other.macro.argument.dp"
    },
    "macro_context": {
      "patterns": [
        {
          "include": "source.dp.embedded.macro"
        }
      ]
    },
    "macro_name": {
      "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
      "name": "entity.name.function.preprocessor.dp"
    },
    "member_access": {
      "match": "(?:((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:(?:\\s)+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:(?:\\s)+)?(?:(?:\\.\\*|\\.)|(?:->\\*|->))(?:(?:\\s)+)?)*)(?:(?:\\s)+)?(\\b(?!uint_least32_t[^\\w]|uint_least16_t[^\\w]|uint_least64_t[^\\w]|int_least32_t[^\\w]|int_least64_t[^\\w]|uint_fast32_t[^\\w]|uint_fast64_t[^\\w]|uint_least8_t[^\\w]|uint_fast16_t[^\\w]|int_least16_t[^\\w]|int_fast16_t[^\\w]|int_least8_t[^\\w]|uint_fast8_t[^\\w]|int_fast64_t[^\\w]|int_fast32_t[^\\w]|int_fast8_t[^\\w]|suseconds_t[^\\w]|useconds_t[^\\w]|in_addr_t[^\\w]|uintmax_t[^\\w]|uintmax_t[^\\w]|uintmax_t[^\\w]|in_port_t[^\\w]|uintptr_t[^\\w]|blksize_t[^\\w]|uint32_t[^\\w]|uint64_t[^\\w]|u_quad_t[^\\w]|intmax_t[^\\w]|intmax_t[^\\w]|unsigned[^\\w]|blkcnt_t[^\\w]|uint16_t[^\\w]|intptr_t[^\\w]|swblk_t[^\\w]|wchar_t[^\\w]|u_short[^\\w]|qaddr_t[^\\w]|caddr_t[^\\w]|daddr_t[^\\w]|fixpt_t[^\\w]|nlink_t[^\\w]|segsz_t[^\\w]|clock_t[^\\w]|ssize_t[^\\w]|int16_t[^\\w]|int32_t[^\\w]|int64_t[^\\w]|uint8_t[^\\w]|int8_t[^\\w]|mode_t[^\\w]|quad_t[^\\w]|ushort[^\\w]|u_long[^\\w]|u_char[^\\w]|double[^\\w]|signed[^\\w]|time_t[^\\w]|size_t[^\\w]|key_t[^\\w]|div_t[^\\w]|ino_t[^\\w]|uid_t[^\\w]|gid_t[^\\w]|off_t[^\\w]|pid_t[^\\w]|float[^\\w]|dev_t[^\\w]|u_int[^\\w]|short[^\\w]|bool[^\\w]|id_t[^\\w]|uint[^\\w]|long[^\\w]|char[^\\w]|void[^\\w]|auto[^\\w]|id_t[^\\w]|int[^\\w])(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b(?!\\())",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "variable.language.this.dp"
        },
        "4": {
          "name": "variable.other.object.access.dp"
        },
        "5": {
          "name": "punctuation.separator.dot-access.dp"
        },
        "6": {
          "name": "punctuation.separator.pointer-access.dp"
        },
        "7": {
          "patterns": [
            {
              "match": "(?<=(?:\\.\\*|\\.|->|->\\*))(?:(?:\\s)+)?(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:(?:\\s)+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "5": {
                  "name": "variable.language.this.dp"
                },
                "6": {
                  "name": "variable.other.object.property.dp"
                },
                "7": {
                  "name": "punctuation.separator.dot-access.dp"
                },
                "8": {
                  "name": "punctuation.separator.pointer-access.dp"
                }
              }
            },
            {
              "match": "(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:(?:\\s)+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "5": {
                  "name": "variable.language.this.dp"
                },
                "6": {
                  "name": "variable.other.object.access.dp"
                },
                "7": {
                  "name": "punctuation.separator.dot-access.dp"
                },
                "8": {
                  "name": "punctuation.separator.pointer-access.dp"
                }
              }
            },
            {
              "include": "#member_access"
            },
            {
              "include": "#method_access"
            }
          ]
        },
        "8": {
          "name": "variable.other.property.dp"
        }
      }
    },
    "memory_operators": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:(?:(delete)(?:(?:\\s)+)?(\\[\\])|(delete))|(new))(?!\\w))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "keyword.operator.wordlike.dp"
        },
        "4": {
          "name": "keyword.operator.delete.array.dp"
        },
        "5": {
          "name": "keyword.operator.delete.array.bracket.dp"
        },
        "6": {
          "name": "keyword.operator.delete.dp"
        },
        "7": {
          "name": "keyword.operator.new.dp"
        }
      }
    },
    "method_access": {
      "begin": "(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:(?:\\s)+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:(?:\\s)+)?(?:(?:\\.\\*|\\.)|(?:->\\*|->))(?:(?:\\s)+)?)*)(?:(?:\\s)+)?(~?(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:(?:\\s)+)?(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "variable.language.this.dp"
        },
        "6": {
          "name": "variable.other.object.access.dp"
        },
        "7": {
          "name": "punctuation.separator.dot-access.dp"
        },
        "8": {
          "name": "punctuation.separator.pointer-access.dp"
        },
        "9": {
          "patterns": [
            {
              "match": "(?<=(?:\\.\\*|\\.|->|->\\*))(?:(?:\\s)+)?(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:(?:\\s)+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "5": {
                  "name": "variable.language.this.dp"
                },
                "6": {
                  "name": "variable.other.object.property.dp"
                },
                "7": {
                  "name": "punctuation.separator.dot-access.dp"
                },
                "8": {
                  "name": "punctuation.separator.pointer-access.dp"
                }
              }
            },
            {
              "match": "(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:(?:\\s)+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "5": {
                  "name": "variable.language.this.dp"
                },
                "6": {
                  "name": "variable.other.object.access.dp"
                },
                "7": {
                  "name": "punctuation.separator.dot-access.dp"
                },
                "8": {
                  "name": "punctuation.separator.pointer-access.dp"
                }
              }
            },
            {
              "include": "#member_access"
            },
            {
              "include": "#method_access"
            }
          ]
        },
        "10": {
          "name": "entity.name.function.member.dp"
        },
        "11": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member.dp"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "misc_keywords": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:(?:constinit)|(?:requires)|(?:type)|(?:concept)|(?:export)|(?:module))(?!\\w))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "keyword.other.$3.dp"
        }
      }
    },
    "ms_attributes": {
      "begin": "__declspec\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.attribute.begin.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.attribute.end.dp"
        }
      },
      "name": "support.other.attribute.dp",
      "patterns": [
        {
          "include": "#attributes_context"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#string_context"
            }
          ]
        },
        {
          "match": "(using)(?:\\s)+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))",
          "captures": {
            "1": {
              "name": "keyword.other.using.directive.dp"
            },
            "2": {
              "name": "entity.name.namespace.dp"
            }
          }
        },
        {
          "match": ",",
          "name": "punctuation.separator.attribute.dp"
        },
        {
          "match": ":",
          "name": "punctuation.accessor.attribute.dp"
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)",
          "name": "entity.name.namespace.dp"
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
          "name": "entity.other.attribute.$0.dp"
        },
        {
          "include": "#number_literal"
        }
      ]
    },
    "namespace_alias": {
      "match": "(?<!\\w)(namespace)(?:\\s)+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(?:\\s)+)?(\\=)(?:(?:\\s)+)?(((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<8>?)+>)(?:\\s)*+)?::)*\\s*+)(?:(?:\\s)+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(?:\\s)+)?(?:(;)|\\n))",
      "captures": {
        "1": {
          "name": "keyword.other.namespace.alias.dp storage.type.namespace.alias.dp"
        },
        "2": {
          "name": "entity.name.namespace.alias.dp"
        },
        "3": {
          "name": "keyword.operator.assignment.dp"
        },
        "4": {
          "name": "meta.declaration.namespace.alias.value.dp"
        },
        "5": {
          "patterns": [
            {
              "include": "#scope_resolution_namespace_alias_inner_generated"
            }
          ]
        },
        "6": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.alias.dp"
        },
        "7": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "9": {
          "name": "entity.name.namespace.dp"
        },
        "10": {
          "name": "punctuation.terminator.statement.dp"
        }
      },
      "name": "meta.declaration.namespace.alias.dp"
    },
    "namespace_block": {
      "begin": "((?<!\\w)namespace(?!\\w))",
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.namespace.dp"
        },
        "1": {
          "name": "keyword.other.namespace.definition.dp storage.type.namespace.definition.dp"
        }
      },
      "endCaptures": {
      },
      "name": "meta.block.namespace.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.namespace.dp"
            }
          },
          "name": "meta.head.namespace.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "include": "#attributes_context"
            },
            {
              "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<4>?)+>)(?:\\s)*+)?::)*\\s*+)(?:(?:\\s)+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(?:\\s)+)?(?:(::)(?:(?:\\s)+)?(inline))?",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#scope_resolution_namespace_block_inner_generated"
                    }
                  ]
                },
                "2": {
                  "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "include": "#template_call_range"
                    }
                  ]
                },
                "4": {
                },
                "5": {
                  "name": "entity.name.namespace.dp"
                },
                "6": {
                  "name": "punctuation.separator.scope-resolution.namespace.block.dp"
                },
                "7": {
                  "name": "storage.modifier.inline.dp"
                }
              }
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.namespace.dp"
            }
          },
          "name": "meta.body.namespace.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.namespace.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "noexcept_operator": {
      "begin": "((?<!\\w)noexcept(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.dp keyword.operator.noexcept.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.noexcept.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.noexcept.dp"
        }
      },
      "contentName": "meta.arguments.operator.noexcept",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "number_literal": {
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "beginCaptures": {
              },
              "endCaptures": {
              },
              "patterns": [
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([pP])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?((?:\\w(?<![0-9a-fA-FpP])\\w*)?$)",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.dp"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "4": {
                      "name": "constant.numeric.hexadecimal.dp"
                    },
                    "5": {
                      "name": "constant.numeric.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "7": {
                      "name": "keyword.other.unit.exponent.hexadecimal.dp"
                    },
                    "8": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.dp"
                    },
                    "9": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.dp"
                    },
                    "10": {
                      "name": "constant.numeric.exponent.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "11": {
                      "name": "keyword.other.unit.suffix.floating-point.dp"
                    },
                    "12": {
                      "name": "keyword.other.unit.user-defined.dp"
                    }
                  }
                },
                {
                  "match": "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([eE])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?((?:\\w(?<![0-9eE])\\w*)?$)",
                  "captures": {
                    "1": {
                      "name": "constant.numeric.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "2": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "3": {
                      "name": "constant.numeric.decimal.point.dp"
                    },
                    "4": {
                      "name": "constant.numeric.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "5": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "6": {
                      "name": "keyword.other.unit.exponent.decimal.dp"
                    },
                    "7": {
                      "name": "keyword.operator.plus.exponent.decimal.dp"
                    },
                    "8": {
                      "name": "keyword.operator.minus.exponent.decimal.dp"
                    },
                    "9": {
                      "name": "constant.numeric.exponent.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "10": {
                      "name": "keyword.other.unit.suffix.floating-point.dp"
                    },
                    "11": {
                      "name": "keyword.other.unit.user-defined.dp"
                    }
                  }
                },
                {
                  "match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?((?:\\w(?<![0-9])\\w*)?$)",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.binary.dp"
                    },
                    "2": {
                      "name": "constant.numeric.binary.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.dp"
                    },
                    "5": {
                      "name": "keyword.other.unit.user-defined.dp"
                    }
                  }
                },
                {
                  "match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?((?:\\w(?<![0-9])\\w*)?$)",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.octal.dp"
                    },
                    "2": {
                      "name": "constant.numeric.octal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.dp"
                    },
                    "5": {
                      "name": "keyword.other.unit.user-defined.dp"
                    }
                  }
                },
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([pP])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?((?:\\w(?<![0-9a-fA-FpP])\\w*)?$)",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.dp"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "4": {
                      "name": "keyword.other.unit.exponent.hexadecimal.dp"
                    },
                    "5": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.dp"
                    },
                    "6": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.dp"
                    },
                    "7": {
                      "name": "constant.numeric.exponent.hexadecimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "8": {
                      "name": "keyword.other.unit.suffix.integer.dp"
                    },
                    "9": {
                      "name": "keyword.other.unit.user-defined.dp"
                    }
                  }
                },
                {
                  "match": "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([eE])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?((?:\\w(?<![0-9eE])\\w*)?$)",
                  "captures": {
                    "1": {
                      "name": "constant.numeric.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "2": {
                      "name": "punctuation.separator.constant.numeric.dp"
                    },
                    "3": {
                      "name": "keyword.other.unit.exponent.decimal.dp"
                    },
                    "4": {
                      "name": "keyword.operator.plus.exponent.decimal.dp"
                    },
                    "5": {
                      "name": "keyword.operator.minus.exponent.decimal.dp"
                    },
                    "6": {
                      "name": "constant.numeric.exponent.decimal.dp",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.dp"
                        }
                      ]
                    },
                    "7": {
                      "name": "keyword.other.unit.suffix.integer.dp"
                    },
                    "8": {
                      "name": "keyword.other.unit.user-defined.dp"
                    }
                  }
                },
                {
                  "match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
                  "name": "invalid.illegal.constant.numeric.dp"
                }
              ]
            }
          ]
        }
      }
    },
    "operator_overload": {
      "begin": "(?:(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<55>?)+>)(?:\\s)*+)?::)*+)?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<55>?)+>)?(?![\\w<:.]))(((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<55>?)+>)(?:\\s)*+)?::)*+)(operator)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<55>?)+>)(?:\\s)*+)?::)*+)(?:(?:((?:(?:delete\\[\\])|(?:delete)|(?:new\\[\\])|(?:<=>)|(?:<<=)|(?:new)|(?:>>=)|(?:\\->\\*)|(?:\\/=)|(?:%=)|(?:&=)|(?:>=)|(?:\\|=)|(?:\\+\\+)|(?:\\-\\-)|(?:\\(\\))|(?:\\[\\])|(?:\\->)|(?:\\+\\+)|(?:<<)|(?:>>)|(?:\\-\\-)|(?:<=)|(?:\\^=)|(?:==)|(?:!=)|(?:&&)|(?:\\|\\|)|(?:\\+=)|(?:\\-=)|(?:\\*=)|,|(?:\\+)|(?:\\-)|!|~|(?:\\*)|&|(?:\\*)|(?:\\/)|%|(?:\\+)|(?:\\-)|<|>|&|(?:\\^)|(?:\\|)|=))|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:\\[\\])?)))|(\"\")((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\<|\\()",
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.function.definition.special.operator-overload.dp"
        },
        "1": {
          "name": "meta.qualified_type.dp",
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "4": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "5": {
          "name": "comment.block.dp"
        },
        "6": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "8": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "9": {
          "name": "comment.block.dp"
        },
        "10": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "13": {
        },
        "14": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "15": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "16": {
          "name": "comment.block.dp"
        },
        "17": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "18": {
        },
        "19": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "21": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "22": {
          "name": "comment.block.dp"
        },
        "23": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "24": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "25": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "26": {
          "name": "comment.block.dp"
        },
        "27": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "28": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "29": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "30": {
          "name": "comment.block.dp"
        },
        "31": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "32": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "33": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "34": {
          "name": "comment.block.dp"
        },
        "35": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "36": {
          "name": "storage.type.modifier.calling-convention.dp"
        },
        "37": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "38": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "39": {
          "name": "comment.block.dp"
        },
        "40": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "41": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "42": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "43": {
          "name": "comment.block.dp"
        },
        "44": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "45": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.operator.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.operator.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "46": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "47": {
        },
        "48": {
          "name": "keyword.other.operator.overload.dp"
        },
        "49": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "50": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "51": {
          "name": "comment.block.dp"
        },
        "52": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "53": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.operator-overload.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.operator-overload.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "54": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "55": {
        },
        "56": {
          "name": "entity.name.operator.dp"
        },
        "57": {
          "name": "entity.name.operator.type.dp"
        },
        "58": {
          "patterns": [
            {
              "match": "\\*",
              "name": "entity.name.operator.type.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "entity.name.operator.type.reference.dp"
            }
          ]
        },
        "59": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "60": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "61": {
          "name": "comment.block.dp"
        },
        "62": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "63": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "64": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "65": {
          "name": "comment.block.dp"
        },
        "66": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "67": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "68": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "69": {
          "name": "comment.block.dp"
        },
        "70": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "71": {
          "name": "entity.name.operator.type.array.dp"
        },
        "72": {
          "name": "entity.name.operator.custom-literal.dp"
        },
        "73": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "74": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "75": {
          "name": "comment.block.dp"
        },
        "76": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "77": {
          "name": "entity.name.operator.custom-literal.dp"
        },
        "78": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "79": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "80": {
          "name": "comment.block.dp"
        },
        "81": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      },
      "endCaptures": {
      },
      "name": "meta.function.definition.special.operator-overload.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload.dp"
            }
          },
          "name": "meta.head.function.definition.special.operator-overload.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "include": "#template_call_range"
            },
            {
              "begin": "\\(",
              "end": "\\)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.begin.bracket.round.special.operator-overload.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.end.bracket.round.special.operator-overload.dp"
                }
              },
              "contentName": "meta.function.definition.parameters.special.operator-overload",
              "patterns": [
                {
                  "include": "#function_parameter_context"
                },
                {
                  "include": "#evaluation_context"
                }
              ]
            },
            {
              "include": "#qualifiers_and_specifiers_post_parameters"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload.dp"
            }
          },
          "name": "meta.body.function.definition.special.operator-overload.dp",
          "patterns": [
            {
              "include": "#function_body_context"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.function.definition.special.operator-overload.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "begin": "((?<!\\w)sizeof(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.dp keyword.operator.sizeof.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.sizeof.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.sizeof.dp"
            }
          },
          "contentName": "meta.arguments.operator.sizeof",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "((?<!\\w)alignof(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.dp keyword.operator.alignof.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.alignof.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.alignof.dp"
            }
          },
          "contentName": "meta.arguments.operator.alignof",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "((?<!\\w)alignas(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.dp keyword.operator.alignas.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.alignas.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.alignas.dp"
            }
          },
          "contentName": "meta.arguments.operator.alignas",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "((?<!\\w)typeid(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.dp keyword.operator.typeid.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.typeid.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.typeid.dp"
            }
          },
          "contentName": "meta.arguments.operator.typeid",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "((?<!\\w)noexcept(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.dp keyword.operator.noexcept.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.noexcept.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.noexcept.dp"
            }
          },
          "contentName": "meta.arguments.operator.noexcept",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "(\\bsizeof\\.\\.\\.)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.dp keyword.operator.sizeof.variadic.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.sizeof.variadic.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.sizeof.variadic.dp"
            }
          },
          "contentName": "meta.arguments.operator.sizeof.variadic",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.dp"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.dp"
        },
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()\\/=",
          "name": "keyword.operator.assignment.compound.dp"
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.dp"
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.dp"
        },
        {
          "match": "!=|<=|>=|==|<|>|in",
          "name": "keyword.operator.comparison.dp"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.dp"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.bitwise.dp"
        },
        {
          "include": "#assignment_operator"
        },
        {
          "match": "%|\\*|\\/|-|\\+",
          "name": "keyword.operator.arithmetic.dp"
        },
        {
          "include": "#ternary_operator"
        }
      ]
    },
    "over_qualified_types": {
      "patterns": [
        {
          "match": "(\\bstruct)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
          "captures": {
            "1": {
              "name": "storage.type.type.parameter.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "4": {
              "name": "entity.name.type.type.parameter.dp"
            },
            "5": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "9": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "10": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "12": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "13": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "14": {
              "name": "variable.other.object.declare.dp"
            },
            "15": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "16": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "17": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "18": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "19": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "20": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "match": "(\\benum)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
          "captures": {
            "1": {
              "name": "storage.type.enum.parameter.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "4": {
              "name": "entity.name.type.enum.parameter.dp"
            },
            "5": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "9": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "10": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "12": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "13": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "14": {
              "name": "variable.other.object.declare.dp"
            },
            "15": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "16": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "17": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "18": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "19": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "20": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "match": "(\\bunion)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
          "captures": {
            "1": {
              "name": "storage.type.union.parameter.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "4": {
              "name": "entity.name.type.union.parameter.dp"
            },
            "5": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "9": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "10": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "12": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "13": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "14": {
              "name": "variable.other.object.declare.dp"
            },
            "15": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "16": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "17": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "18": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "19": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "20": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "match": "(\\bclass)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
          "captures": {
            "1": {
              "name": "storage.type.Struct.parameter.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "4": {
              "name": "entity.name.type.Struct.parameter.dp"
            },
            "5": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "9": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "10": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "12": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "13": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "14": {
              "name": "variable.other.object.declare.dp"
            },
            "15": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "16": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "17": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "18": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "19": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "20": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "parameter": {
      "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\w)",
      "end": "(?:(?=\\))|(,))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.delimiter.comma.dp"
        }
      },
      "name": "meta.parameter.dp",
      "patterns": [
        {
          "include": "#ever_present_context"
        },
        {
          "include": "#function_pointer_parameter"
        },
        {
          "include": "#decltype"
        },
        {
          "include": "#vararg_ellipses"
        },
        {
          "match": "((?:((?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))+)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:\\s)*+(?<!\\w)(?:(?:(?:((?:(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_](?:\\w)*_t))(?!\\w)|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\b\\b(?<!\\Wthread_local|^thread_local|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wstatic|^static|\\Wextern|^extern|\\Wconst|^const)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=,|\\)|=)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#storage_types"
                }
              ]
            },
            "2": {
              "name": "storage.modifier.specifier.parameter.dp"
            },
            "3": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "4": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "5": {
              "name": "comment.block.dp"
            },
            "6": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "8": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "9": {
              "name": "comment.block.dp"
            },
            "10": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "11": {
              "name": "storage.type.primitive.dp storage.type.built-in.primitive.dp"
            },
            "12": {
              "name": "storage.type.dp storage.type.built-in.dp"
            },
            "13": {
              "name": "support.type.posix-reserved.pthread.dp support.type.built-in.posix-reserved.pthread.dp"
            },
            "14": {
              "name": "support.type.posix-reserved.dp support.type.built-in.posix-reserved.dp"
            },
            "15": {
              "name": "entity.name.type.parameter.dp"
            },
            "16": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "17": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "18": {
              "name": "comment.block.dp"
            },
            "19": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            }
          }
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#scope_resolution_parameter_inner_generated"
        },
        {
          "match": "(?:(?:type)|(?:Struct)|(?:union)|(?:enum))",
          "name": "storage.type.$0.dp"
        },
        {
          "begin": "(?<==)",
          "end": "(?:(?=\\))|(,))",
          "beginCaptures": {
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.delimiter.comma.dp"
            }
          },
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "match": "\\=",
          "name": "keyword.operator.assignment.dp"
        },
        {
          "match": "(?<!\\s|\\(|,|:)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\)|,|\\[|=|\\n)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "2": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "3": {
              "name": "comment.block.dp"
            },
            "4": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "5": {
              "name": "variable.parameter.dp"
            },
            "6": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "7": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "8": {
              "name": "comment.block.dp"
            },
            "9": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            }
          }
        },
        {
          "include": "#attributes_context"
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.begin.bracket.square.array.type.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.end.bracket.square.array.type.dp"
            }
          },
          "name": "meta.bracket.square.array.dp",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b(?<!\\Wstruct|^type|\\Wclass|^Struct|\\Wunion|^union|\\Wenum|^enum)",
          "name": "entity.name.type.parameter.dp"
        },
        {
          "include": "#template_call_range"
        },
        {
          "match": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*))",
          "captures": {
            "0": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "1": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "2": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "3": {
              "name": "comment.block.dp"
            },
            "4": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "5": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "6": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "7": {
              "name": "comment.block.dp"
            },
            "8": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            }
          }
        }
      ]
    },
    "parameter_class": {
      "match": "(\\bclass)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
      "captures": {
        "1": {
          "name": "storage.type.Struct.parameter.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.type.Struct.parameter.dp"
        },
        "5": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "13": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "14": {
          "name": "variable.other.object.declare.dp"
        },
        "15": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "16": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "17": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "18": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "parameter_enum": {
      "match": "(\\benum)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
      "captures": {
        "1": {
          "name": "storage.type.enum.parameter.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.type.enum.parameter.dp"
        },
        "5": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "13": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "14": {
          "name": "variable.other.object.declare.dp"
        },
        "15": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "16": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "17": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "18": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "parameter_or_maybe_value": {
      "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\w)",
      "end": "(?:(?=\\))|(,))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.delimiter.comma.dp"
        }
      },
      "name": "meta.parameter.dp",
      "patterns": [
        {
          "include": "#ever_present_context"
        },
        {
          "include": "#function_pointer_parameter"
        },
        {
          "include": "#memory_operators"
        },
        {
          "include": "#builtin_storage_type_initilizer"
        },
        {
          "include": "#curly_initializer"
        },
        {
          "include": "#decltype"
        },
        {
          "include": "#vararg_ellipses"
        },
        {
          "match": "((?:((?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))+)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:\\s)*+(?<!\\w)(?:(?:(?:((?:(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_](?:\\w)*_t))(?!\\w)|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\b\\b(?<!\\Wthread_local|^thread_local|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wstatic|^static|\\Wextern|^extern|\\Wconst|^const)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=,|\\)|=)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#storage_types"
                }
              ]
            },
            "2": {
              "name": "storage.modifier.specifier.parameter.dp"
            },
            "3": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "4": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "5": {
              "name": "comment.block.dp"
            },
            "6": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "8": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "9": {
              "name": "comment.block.dp"
            },
            "10": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "11": {
              "name": "storage.type.primitive.dp storage.type.built-in.primitive.dp"
            },
            "12": {
              "name": "storage.type.dp storage.type.built-in.dp"
            },
            "13": {
              "name": "support.type.posix-reserved.pthread.dp support.type.built-in.posix-reserved.pthread.dp"
            },
            "14": {
              "name": "support.type.posix-reserved.dp support.type.built-in.posix-reserved.dp"
            },
            "15": {
              "name": "entity.name.type.parameter.dp"
            },
            "16": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "17": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "18": {
              "name": "comment.block.dp"
            },
            "19": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            }
          }
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#function_call"
        },
        {
          "include": "#scope_resolution_parameter_inner_generated"
        },
        {
          "match": "(?:(?:type)|(?:Struct)|(?:union)|(?:enum))",
          "name": "storage.type.$0.dp"
        },
        {
          "begin": "(?<==)",
          "end": "(?:(?=\\))|(,))",
          "beginCaptures": {
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.delimiter.comma.dp"
            }
          },
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "match": "(?<!\\s|\\(|,|:)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=(?:\\)|,|\\[|=|\\/\\/|(?:(?:\\n)|$)))",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "2": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "3": {
              "name": "comment.block.dp"
            },
            "4": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "5": {
              "name": "variable.parameter.dp"
            },
            "6": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "7": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "8": {
              "name": "comment.block.dp"
            },
            "9": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            }
          }
        },
        {
          "include": "#attributes_context"
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.begin.bracket.square.array.type.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.end.bracket.square.array.type.dp"
            }
          },
          "name": "meta.bracket.square.array.dp",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b(?<!\\Wstruct|^type|\\Wclass|^Struct|\\Wunion|^union|\\Wenum|^enum)",
          "name": "entity.name.type.parameter.dp"
        },
        {
          "include": "#template_call_range"
        },
        {
          "match": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*))",
          "captures": {
            "0": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "1": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "2": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "3": {
              "name": "comment.block.dp"
            },
            "4": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "5": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "6": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "7": {
              "name": "comment.block.dp"
            },
            "8": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            }
          }
        },
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "parameter_struct": {
      "match": "(\\bstruct)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
      "captures": {
        "1": {
          "name": "storage.type.type.parameter.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.type.type.parameter.dp"
        },
        "5": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "13": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "14": {
          "name": "variable.other.object.declare.dp"
        },
        "15": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "16": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "17": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "18": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "parameter_union": {
      "match": "(\\bunion)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
      "captures": {
        "1": {
          "name": "storage.type.union.parameter.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.type.union.parameter.dp"
        },
        "5": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "13": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "14": {
          "name": "variable.other.object.declare.dp"
        },
        "15": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "16": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "17": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "18": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "parentheses": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.dp"
        }
      },
      "name": "meta.parens.dp",
      "patterns": [
        {
          "include": "#over_qualified_types"
        },
        {
          "match": "(?<!:):(?!:)",
          "name": "punctuation.separator.colon.range-based.dp"
        },
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "pragma": {
      "begin": "^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?pragma\\b",
      "end": "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.directive.pragma.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "punctuation.definition.directive.dp"
        }
      },
      "endCaptures": {
      },
      "name": "meta.preprocessor.pragma.dp",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#string_context"
        },
        {
          "match": "[a-zA-Z_$][\\w\\-$]*",
          "name": "entity.other.attribute-name.pragma.preprocessor.dp"
        },
        {
          "include": "#preprocessor_number_literal"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    "pragma_mark": {
      "match": "(^((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?pragma(?:\\s)+mark)(?:\\s)+(.*)",
      "captures": {
        "1": {
          "name": "keyword.control.directive.pragma.pragma-mark.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "punctuation.definition.directive.dp"
        },
        "5": {
          "name": "entity.name.tag.pragma-mark.dp"
        }
      },
      "name": "meta.preprocessor.pragma.dp"
    },
    "predefined_macros": {
      "patterns": [
        {
          "match": "\\b(__cplusplus|__DATE__|__FILE__|__LINE__|__STDC__|__STDC_HOSTED__|__STDC_NO_COMPLEX__|__STDC_VERSION__|__STDCPP_THREADS__|__TIME__|NDEBUG|__OBJC__|__ASSEMBLER__|__ATOM__|__AVX__|__AVX2__|_CHAR_UNSIGNED|__CLR_VER|_CONTROL_FLOW_GUARD|__COUNTER__|__cplusplus_cli|__cplusplus_winrt|_CPPRTTI|_CPPUNWIND|_DEBUG|_DLL|__FUNCDNAME__|__FUNCSIG__|__FUNCTION__|_INTEGRAL_MAX_BITS|__INTELLISENSE__|_ISO_VOLATILE|_KERNEL_MODE|_M_AMD64|_M_ARM|_M_ARM_ARMV7VE|_M_ARM_FP|_M_ARM64|_M_CEE|_M_CEE_PURE|_M_CEE_SAFE|_M_FP_EXCEPT|_M_FP_FAST|_M_FP_PRECISE|_M_FP_STRICT|_M_IX86|_M_IX86_FP|_M_X64|_MANAGED|_MSC_BUILD|_MSC_EXTENSIONS|_MSC_FULL_VER|_MSC_VER|_MSVC_LANG|__MSVC_RUNTIME_CHECKS|_MT|_NATIVE_WCHAR_T_DEFINED|_OPENMP|_PREFAST|__TIMESTAMP__|_VC_NO_DEFAULTLIB|_WCHAR_T_DEFINED|_WIN32|_WIN64|_WINRT_DLL|_ATL_VER|_MFC_VER|__GFORTRAN__|__GNUC__|__GNUC_MINOR__|__GNUC_PATCHLEVEL__|__GNUG__|__STRICT_ANSI__|__BASE_FILE__|__INCLUDE_LEVEL__|__ELF__|__VERSION__|__OPTIMIZE__|__OPTIMIZE_SIZE__|__NO_INLINE__|__GNUC_STDC_INLINE__|__CHAR_UNSIGNED__|__WCHAR_UNSIGNED__|__REGISTER_PREFIX__|__REGISTER_PREFIX__|__SIZE_TYPE__|__PTRDIFF_TYPE__|__WCHAR_TYPE__|__WINT_TYPE__|__INTMAX_TYPE__|__UINTMAX_TYPE__|__SIG_ATOMIC_TYPE__|__INT8_TYPE__|__INT16_TYPE__|__INT32_TYPE__|__INT64_TYPE__|__UINT8_TYPE__|__UINT16_TYPE__|__UINT32_TYPE__|__UINT64_TYPE__|__INT_LEAST8_TYPE__|__INT_LEAST16_TYPE__|__INT_LEAST32_TYPE__|__INT_LEAST64_TYPE__|__UINT_LEAST8_TYPE__|__UINT_LEAST16_TYPE__|__UINT_LEAST32_TYPE__|__UINT_LEAST64_TYPE__|__INT_FAST8_TYPE__|__INT_FAST16_TYPE__|__INT_FAST32_TYPE__|__INT_FAST64_TYPE__|__UINT_FAST8_TYPE__|__UINT_FAST16_TYPE__|__UINT_FAST32_TYPE__|__UINT_FAST64_TYPE__|__INTPTR_TYPE__|__UINTPTR_TYPE__|__CHAR_BIT__|__SCHAR_MAX__|__WCHAR_MAX__|__SHRT_MAX__|__INT_MAX__|__LONG_MAX__|__LONG_LONG_MAX__|__WINT_MAX__|__SIZE_MAX__|__PTRDIFF_MAX__|__INTMAX_MAX__|__UINTMAX_MAX__|__SIG_ATOMIC_MAX__|__INT8_MAX__|__INT16_MAX__|__INT32_MAX__|__INT64_MAX__|__UINT8_MAX__|__UINT16_MAX__|__UINT32_MAX__|__UINT64_MAX__|__INT_LEAST8_MAX__|__INT_LEAST16_MAX__|__INT_LEAST32_MAX__|__INT_LEAST64_MAX__|__UINT_LEAST8_MAX__|__UINT_LEAST16_MAX__|__UINT_LEAST32_MAX__|__UINT_LEAST64_MAX__|__INT_FAST8_MAX__|__INT_FAST16_MAX__|__INT_FAST32_MAX__|__INT_FAST64_MAX__|__UINT_FAST8_MAX__|__UINT_FAST16_MAX__|__UINT_FAST32_MAX__|__UINT_FAST64_MAX__|__INTPTR_MAX__|__UINTPTR_MAX__|__WCHAR_MIN__|__WINT_MIN__|__SIG_ATOMIC_MIN__|__SCHAR_WIDTH__|__SHRT_WIDTH__|__INT_WIDTH__|__LONG_WIDTH__|__LONG_LONG_WIDTH__|__PTRDIFF_WIDTH__|__SIG_ATOMIC_WIDTH__|__SIZE_WIDTH__|__WCHAR_WIDTH__|__WINT_WIDTH__|__INT_LEAST8_WIDTH__|__INT_LEAST16_WIDTH__|__INT_LEAST32_WIDTH__|__INT_LEAST64_WIDTH__|__INT_FAST8_WIDTH__|__INT_FAST16_WIDTH__|__INT_FAST32_WIDTH__|__INT_FAST64_WIDTH__|__INTPTR_WIDTH__|__INTMAX_WIDTH__|__SIZEOF_INT__|__SIZEOF_LONG__|__SIZEOF_LONG_LONG__|__SIZEOF_SHORT__|__SIZEOF_POINTER__|__SIZEOF_FLOAT__|__SIZEOF_DOUBLE__|__SIZEOF_LONG_DOUBLE__|__SIZEOF_SIZE_T__|__SIZEOF_WCHAR_T__|__SIZEOF_WINT_T__|__SIZEOF_PTRDIFF_T__|__BYTE_ORDER__|__ORDER_LITTLE_ENDIAN__|__ORDER_BIG_ENDIAN__|__ORDER_PDP_ENDIAN__|__FLOAT_WORD_ORDER__|__DEPRECATED|__EXCEPTIONS|__GXX_RTTI|__USING_SJLJ_EXCEPTIONS__|__GXX_EXPERIMENTAL_CXX0X__|__GXX_WEAK__|__NEXT_RUNTIME__|__LP64__|_LP64|__SSP__|__SSP_ALL__|__SSP_STRONG__|__SSP_EXPLICIT__|__SANITIZE_ADDRESS__|__SANITIZE_THREAD__|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16|__HAVE_SPECULATION_SAFE_VALUE|__GCC_HAVE_DWARF2_CFI_ASM|__FP_FAST_FMA|__FP_FAST_FMAF|__FP_FAST_FMAL|__FP_FAST_FMAF16|__FP_FAST_FMAF32|__FP_FAST_FMAF64|__FP_FAST_FMAF128|__FP_FAST_FMAF32X|__FP_FAST_FMAF64X|__FP_FAST_FMAF128X|__GCC_IEC_559|__GCC_IEC_559_COMPLEX|__NO_MATH_ERRNO__|__has_builtin|__has_feature|__has_extension|__has_cpp_attribute|__has_c_attribute|__has_attribute|__has_declspec_attribute|__is_identifier|__has_include|__has_include_next|__has_warning|__BASE_FILE__|__FILE_NAME__|__clang__|__clang_major__|__clang_minor__|__clang_patchlevel__|__clang_version__|__fp16|_Float16)\\b",
          "captures": {
            "1": {
              "name": "entity.name.other.preprocessor.macro.predefined.$1.dp"
            }
          }
        },
        {
          "match": "\\b__([A-Z_]+)__\\b",
          "name": "entity.name.other.preprocessor.macro.predefined.probably.$1.dp"
        }
      ]
    },
    "preprocessor_conditional_context": {
      "patterns": [
        {
          "include": "#preprocessor_conditional_defined"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#language_constants"
        },
        {
          "include": "#string_context"
        },
        {
          "include": "#d9bc4796b0b_preprocessor_number_literal"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#predefined_macros"
        },
        {
          "include": "#macro_name"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    "preprocessor_conditional_defined": {
      "begin": "((?<!\\w)defined(?!\\w))(\\()",
      "end": "(?:\\)|(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$)))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.conditional.defined.dp"
        },
        "2": {
          "name": "punctuation.section.parens.control.defined.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.control.defined.dp"
        }
      },
      "patterns": [
        {
          "include": "#macro_name"
        }
      ]
    },
    "preprocessor_conditional_parentheses": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.dp"
        }
      },
      "name": "meta.parens.preprocessor.conditional.dp"
    },
    "preprocessor_conditional_range": {
      "begin": "^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?((?:(?:ifndef|ifdef)|if))",
      "end": "^(?!\\s*+#\\s*(?:else|endif))",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.directive.conditional.$6.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "punctuation.definition.directive.dp"
        },
        "6": {
        }
      },
      "endCaptures": {
      },
      "patterns": [
        {
          "begin": "\\G(?<=ifndef|ifdef|if)",
          "end": "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.preprocessor.conditional.dp",
          "patterns": [
            {
              "include": "#preprocessor_conditional_context"
            }
          ]
        },
        {
          "include": "$self"
        }
      ]
    },
    "preprocessor_conditional_standalone": {
      "match": "^((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?((?<!\\w)(?:endif|else|elif)(?!\\w))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "punctuation.definition.directive.dp"
        }
      },
      "name": "keyword.control.directive.$4.dp"
    },
    "preprocessor_context": {
      "patterns": [
        {
          "include": "#pragma_mark"
        },
        {
          "include": "#pragma"
        },
        {
          "include": "#include"
        },
        {
          "include": "#line"
        },
        {
          "include": "#diagnostic"
        },
        {
          "include": "#undef"
        },
        {
          "include": "#preprocessor_conditional_range"
        },
        {
          "include": "#single_line_macro"
        },
        {
          "include": "#macro"
        },
        {
          "include": "#preprocessor_conditional_standalone"
        },
        {
          "include": "#macro_argument"
        }
      ]
    },
    "qualified_type": {
      "match": "\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<11>?)+>)(?:\\s)*+)?::)*+)?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<11>?)+>)?(?![\\w<:.])",
      "captures": {
        "0": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "1": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "name": "meta.qualified_type.dp"
    },
    "qualifiers_and_specifiers_post_parameters": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?<!\\w)(?:(?:override)|(?:volatile)|(?:noexcept)|(?:final)|(?:const))(?!\\w))+(?=\\s*(?:(?:\\{|;)|[\\n\\r])))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "storage.modifier.specifier.functional.post-parameters.$3.dp"
        },
        "4": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "scope_resolution": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_function_call": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_function_call_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.call.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_function_call_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_function_call_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.call.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.function.call.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.call.dp"
        }
      }
    },
    "scope_resolution_function_definition": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_function_definition_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.definition.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_function_definition_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_function_definition_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.definition.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.function.definition.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.definition.dp"
        }
      }
    },
    "scope_resolution_function_definition_operator_overload": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_function_definition_operator_overload_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.definition.operator-overload.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_function_definition_operator_overload_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_function_definition_operator_overload_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.definition.operator-overload.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.function.definition.operator-overload.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.function.definition.operator-overload.dp"
        }
      }
    },
    "scope_resolution_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
        }
      }
    },
    "scope_resolution_namespace_alias": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_namespace_alias_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.alias.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_namespace_alias_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_namespace_alias_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.alias.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.namespace.alias.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.alias.dp"
        }
      }
    },
    "scope_resolution_namespace_block": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_namespace_block_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.block.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_namespace_block_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_namespace_block_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.block.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.namespace.block.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.block.dp"
        }
      }
    },
    "scope_resolution_namespace_using": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_namespace_using_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.using.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_namespace_using_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_namespace_using_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.using.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.namespace.using.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.using.dp"
        }
      }
    },
    "scope_resolution_parameter": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_parameter_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.parameter.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_parameter_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_parameter_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.parameter.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.parameter.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.parameter.dp"
        }
      }
    },
    "scope_resolution_template_call": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_template_call_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.template.call.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_template_call_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_template_call_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.template.call.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.template.call.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.template.call.dp"
        }
      }
    },
    "scope_resolution_template_definition": {
      "match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#scope_resolution_template_definition_inner_generated"
            }
          ]
        },
        "1": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.template.definition.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      }
    },
    "scope_resolution_template_definition_inner_generated": {
      "match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution_template_definition_inner_generated"
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.template.definition.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "4": {
        },
        "5": {
          "name": "entity.name.scope-resolution.template.definition.dp"
        },
        "6": {
          "name": "meta.template.call.dp",
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "7": {
        },
        "8": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.template.definition.dp"
        }
      }
    },
    "semicolon": {
      "match": ";",
      "name": "punctuation.terminator.statement.dp"
    },
    "simple_type": {
      "match": "(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<12>?)+>)(?:\\s)*+)?::)*+)?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<12>?)+>)?(?![\\w<:.]))(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?",
      "captures": {
        "1": {
          "name": "meta.qualified_type.dp",
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "9": {
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
        },
        "13": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "14": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "15": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "16": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "17": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "single_line_macro": {
      "match": "^((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))#define.*(?<![\\\\])(?:(?:\\n)|$)",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#macro"
            },
            {
              "include": "#comments"
            }
          ]
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "sizeof_operator": {
      "begin": "((?<!\\w)sizeof(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.dp keyword.operator.sizeof.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.sizeof.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.sizeof.dp"
        }
      },
      "contentName": "meta.arguments.operator.sizeof",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "sizeof_variadic_operator": {
      "begin": "(\\bsizeof\\.\\.\\.)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.dp keyword.operator.sizeof.variadic.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.sizeof.variadic.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.sizeof.variadic.dp"
        }
      },
      "contentName": "meta.arguments.operator.sizeof.variadic",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "square_brackets": {
      "name": "meta.bracket.square.access",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
      "beginCaptures": {
        "1": {
          "name": "variable.other.object"
        },
        "2": {
          "name": "punctuation.definition.begin.bracket.square"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.end.bracket.square"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "standard_declares": {
      "patterns": [
        {
          "match": "((?<!\\w)type(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\S)(?![:{a-zA-Z])",
          "captures": {
            "1": {
              "name": "storage.type.type.declare.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "4": {
              "name": "entity.name.type.type.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "9": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "10": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "12": {
              "name": "variable.other.object.declare.dp"
            },
            "13": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "14": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "match": "((?<!\\w)union(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\S)(?![:{a-zA-Z])",
          "captures": {
            "1": {
              "name": "storage.type.union.declare.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "4": {
              "name": "entity.name.type.union.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "9": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "10": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "12": {
              "name": "variable.other.object.declare.dp"
            },
            "13": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "14": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "match": "((?<!\\w)enum(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\S)(?![:{a-zA-Z])",
          "captures": {
            "1": {
              "name": "storage.type.enum.declare.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "4": {
              "name": "entity.name.type.enum.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "9": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "10": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "12": {
              "name": "variable.other.object.declare.dp"
            },
            "13": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "14": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "match": "((?<!\\w)Struct(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\S)(?![:{a-zA-Z])",
          "captures": {
            "1": {
              "name": "storage.type.Struct.declare.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "4": {
              "name": "entity.name.type.Struct.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "8": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "9": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "10": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "12": {
              "name": "variable.other.object.declare.dp"
            },
            "13": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "14": {
              "patterns": [
                {
                  "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
                  "captures": {
                    "1": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "2": {
                      "name": "comment.block.dp"
                    },
                    "3": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "static_assert": {
      "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)static_assert|_Static_assert(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "keyword.other.static_assert.dp"
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "8": {
          "name": "comment.block.dp"
        },
        "9": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "10": {
          "name": "punctuation.section.arguments.begin.bracket.round.static_assert.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.static_assert.dp"
        }
      },
      "patterns": [
        {
          "begin": "(,)(?:(?:\\s)+)?(?=(?:L|u8|u|U(?:(?:\\s)+)?\\\")?)",
          "end": "(?=\\))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.delimiter.comma.dp"
            }
          },
          "endCaptures": {
          },
          "name": "meta.static_assert.message.dp",
          "patterns": [
            {
              "include": "#string_context"
            }
          ]
        },
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "std_space": {
      "match": "(?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "1": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "storage_specifiers": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const))(?!\\w))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "storage.modifier.specifier.$3.dp"
        }
      }
    },
    "storage_types": {
      "patterns": [
        {
          "include": "#storage_specifiers"
        },
        {
          "include": "#inline_builtin_storage_type"
        },
        {
          "include": "#decltype"
        },
        {
          "include": "#typename"
        }
      ]
    },
    "string_context": {
      "patterns": [
        {
          "begin": "((?:u|u8|U|L)?)\"",
          "end": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.dp"
            },
            "1": {
              "name": "meta.encoding.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.dp"
            }
          },
          "name": "string.quoted.double.dp",
          "patterns": [
            {
              "match": "(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8})",
              "name": "constant.character.escape.dp"
            },
            {
              "match": "\\\\['\"?\\\\abfnrtv]",
              "name": "constant.character.escape.dp"
            },
            {
              "match": "\\\\[0-7]{1,3}",
              "name": "constant.character.escape.dp"
            },
            {
              "match": "(?:(\\\\x0*[0-9a-fA-F]{2}(?![0-9a-fA-F]))|((?:\\\\x[0-9a-fA-F]*|\\\\x)))",
              "captures": {
                "1": {
                  "name": "constant.character.escape.dp"
                },
                "2": {
                  "name": "invalid.illegal.unknown-escape.dp"
                }
              }
            },
            {
              "include": "#string_escapes_context_c"
            }
          ]
        },
        {
          "begin": "(?<![0-9A-Fa-f])((?:u|u8|U|L)?)'",
          "end": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.dp"
            },
            "1": {
              "name": "meta.encoding.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.dp"
            }
          },
          "name": "string.quoted.single.dp",
          "patterns": [
            {
              "match": "(?:(\\\\x0*[0-9a-fA-F]{2}(?![0-9a-fA-F]))|((?:\\\\x[0-9a-fA-F]*|\\\\x)))",
              "captures": {
                "1": {
                  "name": "constant.character.escape.dp"
                },
                "2": {
                  "name": "invalid.illegal.unknown-escape.dp"
                }
              }
            },
            {
              "include": "#string_escapes_context_c"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "((?:[uUL]8?)?R)\\\"(?:(?:_r|re)|regex)\\(",
          "end": "\\)(?:(?:_r|re)|regex)\\\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.dp"
            },
            "1": {
              "name": "meta.encoding.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.dp"
            }
          },
          "name": "string.quoted.double.raw.regex.dp",
          "patterns": [
            {
              "include": "source.regexp.python"
            }
          ]
        },
        {
          "begin": "((?:[uUL]8?)?R)\\\"(?:glsl|GLSL)\\(",
          "end": "\\)(?:glsl|GLSL)\\\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.dp"
            },
            "1": {
              "name": "meta.encoding.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.dp"
            }
          },
          "name": "meta.string.quoted.double.raw.glsl.dp",
          "patterns": [
            {
              "include": "source.glsl"
            }
          ]
        },
        {
          "begin": "((?:[uUL]8?)?R)\\\"(?:[pP]?(?:sql|SQL)|d[dm]l)\\(",
          "end": "\\)(?:[pP]?(?:sql|SQL)|d[dm]l)\\\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.dp"
            },
            "1": {
              "name": "meta.encoding.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.dp"
            }
          },
          "name": "meta.string.quoted.double.raw.sql.dp",
          "patterns": [
            {
              "include": "source.sql"
            }
          ]
        },
        {
          "begin": "((?:u|u8|U|L)?R)\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin"
            },
            "1": {
              "name": "meta.encoding"
            },
            "3": {
              "name": "invalid.illegal.delimiter-too-long"
            }
          },
          "end": "\\)\\2(\\3)\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end"
            },
            "1": {
              "name": "invalid.illegal.delimiter-too-long"
            }
          },
          "name": "string.quoted.double.raw"
        }
      ]
    },
    "string_escapes_context_c": {
      "patterns": [
        {
          "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
          "name": "constant.character.escape"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unknown-escape"
        },
        {
          "match": "(?x) (?!%')(?!%\")%\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
          "name": "constant.other.placeholder"
        }
      ]
    },
    "struct_block": {
      "begin": "((?<!\\w)type(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*+)?(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(:(?!:)))?)",
      "end": "(?:(?:(?<=\\}|%>|\\?\\?>)(?:(?:\\s)+)?(;)|(;))|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.type.dp"
        },
        "1": {
          "name": "storage.type.$1.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "8": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "9": {
          "name": "comment.block.dp"
        },
        "10": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))",
              "captures": {
                "1": {
                  "name": "storage.type.modifier.final.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            },
            {
              "match": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=:|{|$)",
              "captures": {
                "1": {
                  "name": "entity.name.type.type.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "6": {
                  "name": "storage.type.modifier.final.dp"
                },
                "7": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "8": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "9": {
                  "name": "comment.block.dp"
                },
                "10": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            },
            {
              "match": "DLLEXPORT",
              "name": "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.dp"
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.other.preprocessor.macro.predefined.probably.$0.dp"
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "13": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "14": {
          "name": "comment.block.dp"
        },
        "15": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "16": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "17": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "18": {
          "name": "comment.block.dp"
        },
        "19": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "20": {
          "name": "punctuation.separator.colon.inheritance.dp"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.dp"
        },
        "2": {
          "name": "punctuation.terminator.statement.dp"
        }
      },
      "name": "meta.block.type.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.type.dp"
            }
          },
          "name": "meta.head.type.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "include": "#inheritance_context"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.type.dp"
            }
          },
          "name": "meta.body.type.dp",
          "patterns": [
            {
              "include": "#function_pointer"
            },
            {
              "include": "#static_assert"
            },
            {
              "include": "#constructor_inline"
            },
            {
              "include": "#destructor_inline"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.type.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "struct_declare": {
      "match": "((?<!\\w)type(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\S)(?![:{a-zA-Z])",
      "captures": {
        "1": {
          "name": "storage.type.type.declare.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.type.type.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "name": "variable.other.object.declare.dp"
        },
        "13": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "14": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "switch_conditional_parentheses": {
      "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "punctuation.section.parens.begin.bracket.round.conditional.switch.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.conditional.switch.dp"
        }
      },
      "name": "meta.conditional.switch.dp",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "switch_statement": {
      "begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)switch(?!\\w))",
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.switch.dp"
        },
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "3": {
          "name": "comment.block.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "5": {
          "name": "keyword.control.switch.dp"
        }
      },
      "endCaptures": {
      },
      "name": "meta.block.switch.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.switch.dp"
            }
          },
          "name": "meta.head.switch.dp",
          "patterns": [
            {
              "include": "#switch_conditional_parentheses"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.switch.dp"
            }
          },
          "name": "meta.body.switch.dp",
          "patterns": [
            {
              "include": "#default_statement"
            },
            {
              "include": "#case_statement"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.switch.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "template_argument_defaulted": {
      "match": "(?<=<|,)(?:(?:\\s)+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:\\s)+)*)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:(?:\\s)+)?([=])",
      "captures": {
        "1": {
          "name": "storage.type.template.dp"
        },
        "2": {
          "name": "entity.name.type.template.dp"
        },
        "3": {
          "name": "keyword.operator.assignment.dp"
        }
      }
    },
    "template_call_context": {
      "patterns": [
        {
          "include": "#ever_present_context"
        },
        {
          "include": "#template_call_range"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#language_constants"
        },
        {
          "include": "#scope_resolution_template_call_inner_generated"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#number_literal"
        },
        {
          "include": "#string_context"
        },
        {
          "include": "#comma_in_template_argument"
        },
        {
          "include": "#qualified_type"
        }
      ]
    },
    "template_call_innards": {
      "match": "((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<1>?)+>)(?:\\s)*+",
      "captures": {
        "0": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        }
      },
      "name": "meta.template.call.dp"
    },
    "template_call_range": {
      "begin": "<",
      "end": ">",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.angle-brackets.begin.template.call.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.angle-brackets.end.template.call.dp"
        }
      },
      "name": "meta.template.call.dp",
      "patterns": [
        {
          "include": "#template_call_context"
        }
      ]
    },
    "template_definition": {
      "begin": "(?<!\\w)(template)(?:(?:\\s)+)?(<)",
      "end": ">",
      "beginCaptures": {
        "1": {
          "name": "storage.type.template.dp"
        },
        "2": {
          "name": "punctuation.section.angle-brackets.start.template.definition.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.angle-brackets.end.template.definition.dp"
        }
      },
      "name": "meta.template.definition.dp",
      "patterns": [
        {
          "begin": "(?<=\\w)(?:(?:\\s)+)?<",
          "end": ">",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.angle-brackets.begin.template.call.dp"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.angle-brackets.begin.template.call.dp"
            }
          },
          "patterns": [
            {
              "include": "#template_call_context"
            }
          ]
        },
        {
          "include": "#template_definition_context"
        }
      ]
    },
    "template_definition_argument": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:\\s)+)+)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))|((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:(?:\\s)+)?(\\.\\.\\.)(?:(?:\\s)+)?((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))(?:(?:\\s)+)?(?:(,)|(?=>|$))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "storage.type.template.argument.$3.dp"
        },
        "4": {
          "patterns": [
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "storage.type.template.argument.$0.dp"
            }
          ]
        },
        "5": {
          "name": "entity.name.type.template.dp"
        },
        "6": {
          "name": "storage.type.template.dp"
        },
        "7": {
          "name": "punctuation.vararg-ellipses.template.definition.dp"
        },
        "8": {
          "name": "entity.name.type.template.dp"
        },
        "9": {
          "name": "punctuation.separator.delimiter.comma.template.argument.dp"
        }
      }
    },
    "template_definition_context": {
      "patterns": [
        {
          "include": "#scope_resolution_template_definition_inner_generated"
        },
        {
          "include": "#template_definition_argument"
        },
        {
          "include": "#template_argument_defaulted"
        },
        {
          "include": "#template_call_innards"
        },
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "template_isolated_definition": {
      "match": "(?<!\\w)(template)(?:(?:\\s)+)?(<)(.*)(>(?:(?:\\s)+)?$)",
      "captures": {
        "1": {
          "name": "storage.type.template.dp"
        },
        "2": {
          "name": "punctuation.section.angle-brackets.start.template.definition.dp"
        },
        "3": {
          "name": "meta.template.definition.dp",
          "patterns": [
            {
              "include": "#template_definition_context"
            }
          ]
        },
        "4": {
          "name": "punctuation.section.angle-brackets.end.template.definition.dp"
        }
      }
    },
    "ternary_operator": {
      "begin": "\\?",
      "end": ":",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.ternary.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "keyword.operator.ternary.dp"
        }
      },
      "patterns": [
        {
          "include": "#ever_present_context"
        },
        {
          "include": "#string_context"
        },
        {
          "include": "#number_literal"
        },
        {
          "include": "#method_access"
        },
        {
          "include": "#member_access"
        },
        {
          "include": "#predefined_macros"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#memory_operators"
        },
        {
          "include": "#wordlike_operators"
        },
        {
          "include": "#type_casting_operators"
        },
        {
          "include": "#control_flow_keywords"
        },
        {
          "include": "#exception_keywords"
        },
        {
          "include": "#the_this_keyword"
        },
        {
          "include": "#language_constants"
        },
        {
          "include": "#builtin_storage_type_initilizer"
        },
        {
          "include": "#qualifiers_and_specifiers_post_parameters"
        },
        {
          "include": "#functional_specifiers_pre_parameters"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#lambdas"
        },
        {
          "include": "#attributes_context"
        },
        {
          "include": "#parentheses"
        },
        {
          "include": "#function_call"
        },
        {
          "include": "#scope_resolution_inner_generated"
        },
        {
          "include": "#square_brackets"
        },
        {
          "include": "#semicolon"
        },
        {
          "include": "#comma"
        }
      ],
      "applyEndPatternLast": 1
    },
    "the_this_keyword": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)this(?!\\w))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "variable.language.this.dp"
        }
      }
    },
    "type_alias": {
      "match": "(using)(?:(?:\\s)+)?(?!namespace)(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<29>?)+>)(?:\\s)*+)?::)*+)?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<29>?)+>)?(?![\\w<:.]))(?:(?:\\s)+)?(\\=)(?:(?:\\s)+)?((?:typename)?)(?:(?:\\s)+)?((?:(?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))(?<!\\w)(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const))(?!\\w)(?:\\s)+)+)?(?:(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<29>?)+>)(?:\\s)*+)?::)*+)?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<29>?)+>)?(?![\\w<:.]))|(.*(?<!;)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?:(\\[)(\\w*)(\\])(?:(?:\\s)+)?)?(?:(?:\\s)+)?(?:(;)|\\n)",
      "captures": {
        "1": {
          "name": "keyword.other.using.directive.dp"
        },
        "2": {
          "name": "meta.qualified_type.dp",
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "14": {
          "name": "keyword.operator.assignment.dp"
        },
        "15": {
          "name": "keyword.other.typename.dp"
        },
        "16": {
          "patterns": [
            {
              "include": "#storage_specifiers"
            }
          ]
        },
        "17": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "18": {
          "name": "meta.qualified_type.dp",
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "19": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "20": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "21": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "22": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "23": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "24": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "25": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "27": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "28": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "30": {
          "name": "meta.declaration.type.alias.value.unknown.dp",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        "31": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "32": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "33": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "34": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "35": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "36": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "37": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "38": {
          "name": "punctuation.definition.begin.bracket.square.dp"
        },
        "39": {
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        "40": {
          "name": "punctuation.definition.end.bracket.square.dp"
        },
        "41": {
          "name": "punctuation.terminator.statement.dp"
        }
      },
      "name": "meta.declaration.type.alias.dp"
    },
    "type_casting_operators": {
      "match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:(?:reinterpret_cast)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast))(?!\\w))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "keyword.operator.wordlike.dp keyword.operator.cast.$3.dp"
        }
      }
    },
    "typedef_class": {
      "begin": "((?<!\\w)type(?!\\w))(?:(?:\\s)+)?(?=(?<!\\w)Struct(?!\\w))",
      "end": "(?<=;)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.type.dp"
        }
      },
      "endCaptures": {
      },
      "patterns": [
        {
          "begin": "((?<!\\w)Struct(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*+)?(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(:(?!:)))?)",
          "end": "(?:(?:(?<=\\}|%>|\\?\\?>)(?:(?:\\s)+)?(;)|(;))|(?=[;>\\[\\]=]))",
          "beginCaptures": {
            "0": {
              "name": "meta.head.Struct.dp"
            },
            "1": {
              "name": "storage.type.$1.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#attributes_context"
                },
                {
                  "include": "#number_literal"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "8": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "9": {
              "name": "comment.block.dp"
            },
            "10": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))",
                  "captures": {
                    "1": {
                      "name": "storage.type.modifier.final.dp"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "3": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "4": {
                      "name": "comment.block.dp"
                    },
                    "5": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=:|{|$)",
                  "captures": {
                    "1": {
                      "name": "entity.name.type.Struct.dp"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "3": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "4": {
                      "name": "comment.block.dp"
                    },
                    "5": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "6": {
                      "name": "storage.type.modifier.final.dp"
                    },
                    "7": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "8": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "9": {
                      "name": "comment.block.dp"
                    },
                    "10": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "DLLEXPORT",
                  "name": "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.dp"
                },
                {
                  "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
                  "name": "entity.name.other.preprocessor.macro.predefined.probably.$0.dp"
                }
              ]
            },
            "12": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "13": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "14": {
              "name": "comment.block.dp"
            },
            "15": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "16": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "17": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "18": {
              "name": "comment.block.dp"
            },
            "19": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "20": {
              "name": "punctuation.separator.colon.inheritance.dp"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.statement.dp"
            },
            "2": {
              "name": "punctuation.terminator.statement.dp"
            }
          },
          "name": "meta.block.Struct.dp",
          "patterns": [
            {
              "begin": "\\G ?",
              "end": "(?:\\{|<%|\\?\\?<|(?=;))",
              "beginCaptures": {
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.block.begin.bracket.curly.Struct.dp"
                }
              },
              "name": "meta.head.Struct.dp",
              "patterns": [
                {
                  "include": "#ever_present_context"
                },
                {
                  "include": "#inheritance_context"
                },
                {
                  "include": "#template_call_range"
                }
              ]
            },
            {
              "begin": "(?<=\\{|<%|\\?\\?<)",
              "end": "\\}|%>|\\?\\?>",
              "beginCaptures": {
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.block.end.bracket.curly.Struct.dp"
                }
              },
              "name": "meta.body.Struct.dp",
              "patterns": [
                {
                  "include": "#function_pointer"
                },
                {
                  "include": "#static_assert"
                },
                {
                  "include": "#constructor_inline"
                },
                {
                  "include": "#destructor_inline"
                },
                {
                  "include": "$self"
                }
              ]
            },
            {
              "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
              "end": "[\\s]*(?=;)",
              "beginCaptures": {
              },
              "endCaptures": {
              },
              "name": "meta.tail.Struct.dp",
              "patterns": [
                {
                  "match": "(((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "match": "\\*",
                          "name": "storage.modifier.pointer.dp"
                        },
                        {
                          "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                          "captures": {
                            "1": {
                              "patterns": [
                                {
                                  "include": "#inline_comment"
                                }
                              ]
                            },
                            "2": {
                              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                            },
                            "3": {
                              "name": "comment.block.dp"
                            },
                            "4": {
                              "patterns": [
                                {
                                  "match": "\\*\\/",
                                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                                },
                                {
                                  "match": "\\*",
                                  "name": "comment.block.dp"
                                }
                              ]
                            }
                          },
                          "name": "invalid.illegal.reference-type.dp"
                        },
                        {
                          "match": "\\&",
                          "name": "storage.modifier.reference.dp"
                        }
                      ]
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "3": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "4": {
                      "name": "comment.block.dp"
                    },
                    "5": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "6": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "7": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "8": {
                      "name": "comment.block.dp"
                    },
                    "9": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "10": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "11": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "12": {
                      "name": "comment.block.dp"
                    },
                    "13": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "14": {
                      "name": "entity.name.type.alias.dp"
                    }
                  }
                },
                {
                  "match": ","
                }
              ]
            }
          ]
        }
      ]
    },
    "typedef_function_pointer": {
      "begin": "((?<!\\w)type(?!\\w))(?:(?:\\s)+)?(?=.*\\(\\*\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\s*\\))",
      "end": "(?<=;)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.type.dp"
        }
      },
      "endCaptures": {
      },
      "patterns": [
        {
          "begin": "(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<18>?)+>)(?:\\s)*+)?::)*+)?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<18>?)+>)?(?![\\w<:.]))(((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()(\\*)(?:(?:\\s)+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:(?:\\s)+)?(?:(\\[)(\\w*)(\\])(?:(?:\\s)+)?)*(\\))(?:(?:\\s)+)?(\\()",
          "end": "(\\))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=[{=,);>]|\\n)(?!\\()",
          "beginCaptures": {
            "1": {
              "name": "meta.qualified_type.dp",
              "patterns": [
                {
                  "match": "::",
                  "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
                },
                {
                  "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
                  "name": "storage.type.$0.dp"
                },
                {
                  "include": "#attributes_context"
                },
                {
                  "include": "#storage_types"
                },
                {
                  "include": "#number_literal"
                },
                {
                  "include": "#string_context"
                },
                {
                  "include": "#comma"
                },
                {
                  "include": "#scope_resolution_inner_generated"
                },
                {
                  "begin": "<",
                  "end": ">",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                    }
                  },
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.section.angle-brackets.end.template.call.dp"
                    }
                  },
                  "name": "meta.template.call.dp",
                  "patterns": [
                    {
                      "include": "#template_call_context"
                    }
                  ]
                },
                {
                  "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
                  "name": "entity.name.type.dp"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "#attributes_context"
                },
                {
                  "include": "#number_literal"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "4": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "5": {
              "name": "comment.block.dp"
            },
            "6": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "8": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "9": {
              "name": "comment.block.dp"
            },
            "10": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "::",
                  "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
                },
                {
                  "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
                  "name": "entity.name.scope-resolution.type.dp"
                },
                {
                  "include": "#template_call_range"
                }
              ]
            },
            "12": {
              "patterns": [
                {
                  "include": "#template_call_range"
                }
              ]
            },
            "13": {
            },
            "14": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "15": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "16": {
              "name": "comment.block.dp"
            },
            "17": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "18": {
            },
            "19": {
              "patterns": [
                {
                  "match": "\\*",
                  "name": "storage.modifier.pointer.dp"
                },
                {
                  "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "2": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "3": {
                      "name": "comment.block.dp"
                    },
                    "4": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  },
                  "name": "invalid.illegal.reference-type.dp"
                },
                {
                  "match": "\\&",
                  "name": "storage.modifier.reference.dp"
                }
              ]
            },
            "20": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "21": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "22": {
              "name": "comment.block.dp"
            },
            "23": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "24": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "25": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "26": {
              "name": "comment.block.dp"
            },
            "27": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "28": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "29": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "30": {
              "name": "comment.block.dp"
            },
            "31": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "32": {
              "name": "punctuation.section.parens.begin.bracket.round.function.pointer.dp"
            },
            "33": {
              "name": "punctuation.definition.function.pointer.dereference.dp"
            },
            "34": {
              "name": "entity.name.type.alias.dp entity.name.type.pointer.function.dp"
            },
            "35": {
              "name": "punctuation.definition.begin.bracket.square.dp"
            },
            "36": {
              "patterns": [
                {
                  "include": "#evaluation_context"
                }
              ]
            },
            "37": {
              "name": "punctuation.definition.end.bracket.square.dp"
            },
            "38": {
              "name": "punctuation.section.parens.end.bracket.round.function.pointer.dp"
            },
            "39": {
              "name": "punctuation.section.parameters.begin.bracket.round.function.pointer.dp"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parameters.end.bracket.round.function.pointer.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            }
          },
          "patterns": [
            {
              "include": "#function_parameter_context"
            }
          ]
        }
      ]
    },
    "typedef_struct": {
      "begin": "((?<!\\w)type(?!\\w))(?:(?:\\s)+)?(?=(?<!\\w)type(?!\\w))",
      "end": "(?<=;)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.type.dp"
        }
      },
      "endCaptures": {
      },
      "patterns": [
        {
          "begin": "((?<!\\w)type(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*+)?(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(:(?!:)))?)",
          "end": "(?:(?:(?<=\\}|%>|\\?\\?>)(?:(?:\\s)+)?(;)|(;))|(?=[;>\\[\\]=]))",
          "beginCaptures": {
            "0": {
              "name": "meta.head.type.dp"
            },
            "1": {
              "name": "storage.type.$1.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#attributes_context"
                },
                {
                  "include": "#number_literal"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "8": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "9": {
              "name": "comment.block.dp"
            },
            "10": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))",
                  "captures": {
                    "1": {
                      "name": "storage.type.modifier.final.dp"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "3": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "4": {
                      "name": "comment.block.dp"
                    },
                    "5": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=:|{|$)",
                  "captures": {
                    "1": {
                      "name": "entity.name.type.type.dp"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "3": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "4": {
                      "name": "comment.block.dp"
                    },
                    "5": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "6": {
                      "name": "storage.type.modifier.final.dp"
                    },
                    "7": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "8": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "9": {
                      "name": "comment.block.dp"
                    },
                    "10": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "DLLEXPORT",
                  "name": "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.dp"
                },
                {
                  "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
                  "name": "entity.name.other.preprocessor.macro.predefined.probably.$0.dp"
                }
              ]
            },
            "12": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "13": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "14": {
              "name": "comment.block.dp"
            },
            "15": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "16": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "17": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "18": {
              "name": "comment.block.dp"
            },
            "19": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "20": {
              "name": "punctuation.separator.colon.inheritance.dp"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.statement.dp"
            },
            "2": {
              "name": "punctuation.terminator.statement.dp"
            }
          },
          "name": "meta.block.type.dp",
          "patterns": [
            {
              "begin": "\\G ?",
              "end": "(?:\\{|<%|\\?\\?<|(?=;))",
              "beginCaptures": {
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.block.begin.bracket.curly.type.dp"
                }
              },
              "name": "meta.head.type.dp",
              "patterns": [
                {
                  "include": "#ever_present_context"
                },
                {
                  "include": "#inheritance_context"
                },
                {
                  "include": "#template_call_range"
                }
              ]
            },
            {
              "begin": "(?<=\\{|<%|\\?\\?<)",
              "end": "\\}|%>|\\?\\?>",
              "beginCaptures": {
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.block.end.bracket.curly.type.dp"
                }
              },
              "name": "meta.body.type.dp",
              "patterns": [
                {
                  "include": "#function_pointer"
                },
                {
                  "include": "#static_assert"
                },
                {
                  "include": "#constructor_inline"
                },
                {
                  "include": "#destructor_inline"
                },
                {
                  "include": "$self"
                }
              ]
            },
            {
              "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
              "end": "[\\s]*(?=;)",
              "beginCaptures": {
              },
              "endCaptures": {
              },
              "name": "meta.tail.type.dp",
              "patterns": [
                {
                  "match": "(((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "match": "\\*",
                          "name": "storage.modifier.pointer.dp"
                        },
                        {
                          "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                          "captures": {
                            "1": {
                              "patterns": [
                                {
                                  "include": "#inline_comment"
                                }
                              ]
                            },
                            "2": {
                              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                            },
                            "3": {
                              "name": "comment.block.dp"
                            },
                            "4": {
                              "patterns": [
                                {
                                  "match": "\\*\\/",
                                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                                },
                                {
                                  "match": "\\*",
                                  "name": "comment.block.dp"
                                }
                              ]
                            }
                          },
                          "name": "invalid.illegal.reference-type.dp"
                        },
                        {
                          "match": "\\&",
                          "name": "storage.modifier.reference.dp"
                        }
                      ]
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "3": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "4": {
                      "name": "comment.block.dp"
                    },
                    "5": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "6": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "7": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "8": {
                      "name": "comment.block.dp"
                    },
                    "9": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "10": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "11": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "12": {
                      "name": "comment.block.dp"
                    },
                    "13": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "14": {
                      "name": "entity.name.type.alias.dp"
                    }
                  }
                },
                {
                  "match": ","
                }
              ]
            }
          ]
        }
      ]
    },
    "typedef_union": {
      "begin": "((?<!\\w)type(?!\\w))(?:(?:\\s)+)?(?=(?<!\\w)union(?!\\w))",
      "end": "(?<=;)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.type.dp"
        }
      },
      "endCaptures": {
      },
      "patterns": [
        {
          "begin": "((?<!\\w)union(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*+)?(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(:(?!:)))?)",
          "end": "(?:(?:(?<=\\}|%>|\\?\\?>)(?:(?:\\s)+)?(;)|(;))|(?=[;>\\[\\]=]))",
          "beginCaptures": {
            "0": {
              "name": "meta.head.union.dp"
            },
            "1": {
              "name": "storage.type.$1.dp"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "4": {
              "name": "comment.block.dp"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#attributes_context"
                },
                {
                  "include": "#number_literal"
                }
              ]
            },
            "7": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "8": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "9": {
              "name": "comment.block.dp"
            },
            "10": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "11": {
              "patterns": [
                {
                  "match": "((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))",
                  "captures": {
                    "1": {
                      "name": "storage.type.modifier.final.dp"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "3": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "4": {
                      "name": "comment.block.dp"
                    },
                    "5": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=:|{|$)",
                  "captures": {
                    "1": {
                      "name": "entity.name.type.union.dp"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "3": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "4": {
                      "name": "comment.block.dp"
                    },
                    "5": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "6": {
                      "name": "storage.type.modifier.final.dp"
                    },
                    "7": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "8": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "9": {
                      "name": "comment.block.dp"
                    },
                    "10": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "DLLEXPORT",
                  "name": "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.dp"
                },
                {
                  "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
                  "name": "entity.name.other.preprocessor.macro.predefined.probably.$0.dp"
                }
              ]
            },
            "12": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "13": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "14": {
              "name": "comment.block.dp"
            },
            "15": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "16": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "17": {
              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
            },
            "18": {
              "name": "comment.block.dp"
            },
            "19": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.dp"
                }
              ]
            },
            "20": {
              "name": "punctuation.separator.colon.inheritance.dp"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.statement.dp"
            },
            "2": {
              "name": "punctuation.terminator.statement.dp"
            }
          },
          "name": "meta.block.union.dp",
          "patterns": [
            {
              "begin": "\\G ?",
              "end": "(?:\\{|<%|\\?\\?<|(?=;))",
              "beginCaptures": {
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.block.begin.bracket.curly.union.dp"
                }
              },
              "name": "meta.head.union.dp",
              "patterns": [
                {
                  "include": "#ever_present_context"
                },
                {
                  "include": "#inheritance_context"
                },
                {
                  "include": "#template_call_range"
                }
              ]
            },
            {
              "begin": "(?<=\\{|<%|\\?\\?<)",
              "end": "\\}|%>|\\?\\?>",
              "beginCaptures": {
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.block.end.bracket.curly.union.dp"
                }
              },
              "name": "meta.body.union.dp",
              "patterns": [
                {
                  "include": "#function_pointer"
                },
                {
                  "include": "#static_assert"
                },
                {
                  "include": "#constructor_inline"
                },
                {
                  "include": "#destructor_inline"
                },
                {
                  "include": "$self"
                }
              ]
            },
            {
              "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
              "end": "[\\s]*(?=;)",
              "beginCaptures": {
              },
              "endCaptures": {
              },
              "name": "meta.tail.union.dp",
              "patterns": [
                {
                  "match": "(((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "match": "\\*",
                          "name": "storage.modifier.pointer.dp"
                        },
                        {
                          "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
                          "captures": {
                            "1": {
                              "patterns": [
                                {
                                  "include": "#inline_comment"
                                }
                              ]
                            },
                            "2": {
                              "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                            },
                            "3": {
                              "name": "comment.block.dp"
                            },
                            "4": {
                              "patterns": [
                                {
                                  "match": "\\*\\/",
                                  "name": "comment.block.dp punctuation.definition.comment.end.dp"
                                },
                                {
                                  "match": "\\*",
                                  "name": "comment.block.dp"
                                }
                              ]
                            }
                          },
                          "name": "invalid.illegal.reference-type.dp"
                        },
                        {
                          "match": "\\&",
                          "name": "storage.modifier.reference.dp"
                        }
                      ]
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "3": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "4": {
                      "name": "comment.block.dp"
                    },
                    "5": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "6": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "7": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "8": {
                      "name": "comment.block.dp"
                    },
                    "9": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "10": {
                      "patterns": [
                        {
                          "include": "#inline_comment"
                        }
                      ]
                    },
                    "11": {
                      "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                    },
                    "12": {
                      "name": "comment.block.dp"
                    },
                    "13": {
                      "patterns": [
                        {
                          "match": "\\*\\/",
                          "name": "comment.block.dp punctuation.definition.comment.end.dp"
                        },
                        {
                          "match": "\\*",
                          "name": "comment.block.dp"
                        }
                      ]
                    },
                    "14": {
                      "name": "entity.name.type.alias.dp"
                    }
                  }
                },
                {
                  "match": ","
                }
              ]
            }
          ]
        }
      ]
    },
    "typeid_operator": {
      "begin": "((?<!\\w)typeid(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.dp keyword.operator.typeid.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.typeid.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.typeid.dp"
        }
      },
      "contentName": "meta.arguments.operator.typeid",
      "patterns": [
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "typename": {
      "match": "(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?<!\\w)typename(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:type)|(?:Struct)|(?:union)|(?:enum)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<17>?)+>)(?:\\s)*+)?::)*+)?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:type)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<17>?)+>)?(?![\\w<:.]))",
      "captures": {
        "1": {
          "name": "storage.modifier.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "6": {
          "name": "meta.qualified_type.dp",
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.dp"
            },
            {
              "match": "(?<!\\w)(?:(?:type)|(?:Struct)|(?:union)|(?:enum))(?!\\w)",
              "name": "storage.type.$0.dp"
            },
            {
              "include": "#attributes_context"
            },
            {
              "include": "#storage_types"
            },
            {
              "include": "#number_literal"
            },
            {
              "include": "#string_context"
            },
            {
              "include": "#comma"
            },
            {
              "include": "#scope_resolution_inner_generated"
            },
            {
              "begin": "<",
              "end": ">",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.begin.template.call.dp"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.angle-brackets.end.template.call.dp"
                }
              },
              "name": "meta.template.call.dp",
              "patterns": [
                {
                  "include": "#template_call_context"
                }
              ]
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.type.dp"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "match": "::",
              "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.type.dp"
            },
            {
              "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
              "name": "entity.name.scope-resolution.type.dp"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        "13": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "14": {
        },
        "15": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "16": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "17": {
        }
      }
    },
    "undef": {
      "match": "(^((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?undef\\b)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))",
      "captures": {
        "1": {
          "name": "keyword.control.directive.undef.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "punctuation.definition.directive.dp"
        },
        "5": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "7": {
          "name": "entity.name.function.preprocessor.dp"
        }
      },
      "name": "meta.preprocessor.undef.dp"
    },
    "union_block": {
      "begin": "((?<!\\w)union(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*+)?(?:((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(:(?!:)))?)",
      "end": "(?:(?:(?<=\\}|%>|\\?\\?>)(?:(?:\\s)+)?(;)|(;))|(?=[;>\\[\\]=]))",
      "beginCaptures": {
        "0": {
          "name": "meta.head.union.dp"
        },
        "1": {
          "name": "storage.type.$1.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "4": {
          "name": "comment.block.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#attributes_context"
            },
            {
              "include": "#number_literal"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "8": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "9": {
          "name": "comment.block.dp"
        },
        "10": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))",
              "captures": {
                "1": {
                  "name": "storage.type.modifier.final.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            },
            {
              "match": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:((?<!\\w)final(?!\\w))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=:|{|$)",
              "captures": {
                "1": {
                  "name": "entity.name.type.union.dp"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "3": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "4": {
                  "name": "comment.block.dp"
                },
                "5": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                },
                "6": {
                  "name": "storage.type.modifier.final.dp"
                },
                "7": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "8": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "9": {
                  "name": "comment.block.dp"
                },
                "10": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            },
            {
              "match": "DLLEXPORT",
              "name": "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.dp"
            },
            {
              "match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
              "name": "entity.name.other.preprocessor.macro.predefined.probably.$0.dp"
            }
          ]
        },
        "12": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "13": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "14": {
          "name": "comment.block.dp"
        },
        "15": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "16": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "17": {
          "name": "comment.block.dp punctuation.definition.comment.begin.dp"
        },
        "18": {
          "name": "comment.block.dp"
        },
        "19": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.dp punctuation.definition.comment.end.dp"
            },
            {
              "match": "\\*",
              "name": "comment.block.dp"
            }
          ]
        },
        "20": {
          "name": "punctuation.separator.colon.inheritance.dp"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.dp"
        },
        "2": {
          "name": "punctuation.terminator.statement.dp"
        }
      },
      "name": "meta.block.union.dp",
      "patterns": [
        {
          "begin": "\\G ?",
          "end": "(?:\\{|<%|\\?\\?<|(?=;))",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.union.dp"
            }
          },
          "name": "meta.head.union.dp",
          "patterns": [
            {
              "include": "#ever_present_context"
            },
            {
              "include": "#inheritance_context"
            },
            {
              "include": "#template_call_range"
            }
          ]
        },
        {
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "\\}|%>|\\?\\?>",
          "beginCaptures": {
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.union.dp"
            }
          },
          "name": "meta.body.union.dp",
          "patterns": [
            {
              "include": "#function_pointer"
            },
            {
              "include": "#static_assert"
            },
            {
              "include": "#constructor_inline"
            },
            {
              "include": "#destructor_inline"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s]*",
          "end": "[\\s]*(?=;)",
          "beginCaptures": {
          },
          "endCaptures": {
          },
          "name": "meta.tail.union.dp",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "union_declare": {
      "match": "((?<!\\w)union(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\S)(?![:{a-zA-Z])",
      "captures": {
        "1": {
          "name": "storage.type.union.declare.dp"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "4": {
          "name": "entity.name.type.union.dp"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*",
              "name": "storage.modifier.pointer.dp"
            },
            {
              "match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#inline_comment"
                    }
                  ]
                },
                "2": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "3": {
                  "name": "comment.block.dp"
                },
                "4": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              },
              "name": "invalid.illegal.reference-type.dp"
            },
            {
              "match": "\\&",
              "name": "storage.modifier.reference.dp"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        },
        "12": {
          "name": "variable.other.object.declare.dp"
        },
        "13": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "14": {
          "patterns": [
            {
              "match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
              "captures": {
                "1": {
                  "name": "comment.block.dp punctuation.definition.comment.begin.dp"
                },
                "2": {
                  "name": "comment.block.dp"
                },
                "3": {
                  "patterns": [
                    {
                      "match": "\\*\\/",
                      "name": "comment.block.dp punctuation.definition.comment.end.dp"
                    },
                    {
                      "match": "\\*",
                      "name": "comment.block.dp"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "using_name": {
      "match": "(using)(?:\\s)+(?!namespace\\b)",
      "captures": {
        "1": {
          "name": "keyword.other.using.directive.dp"
        }
      }
    },
    "using_namespace": {
      "begin": "(?<!\\w)(using)(?:\\s)+(namespace)(?:\\s)+((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|type|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|type|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|Struct|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<6>?)+>)(?:\\s)*+)?::)*\\s*+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?=;|\\n)",
      "end": ";",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.using.directive.dp"
        },
        "2": {
          "name": "keyword.other.namespace.directive.dp storage.type.namespace.directive.dp"
        },
        "3": {
          "patterns": [
            {
              "include": "#scope_resolution_namespace_using_inner_generated"
            }
          ]
        },
        "4": {
          "name": "punctuation.separator.namespace.access.dp punctuation.separator.scope-resolution.namespace.using.dp"
        },
        "5": {
          "patterns": [
            {
              "include": "#template_call_range"
            }
          ]
        },
        "6": {
        },
        "7": {
          "name": "entity.name.namespace.dp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.dp"
        }
      },
      "name": "meta.using-namespace.dp"
    },
    "vararg_ellipses": {
      "match": "(?<!\\.)\\.\\.\\.(?!\\.)",
      "name": "punctuation.vararg-ellipses.dp"
    },
    "wordlike_operators": {
      "patterns": [
        {
          "match": "(?<!\\w)(?:(?:noexcept)|(?:xor_eq)|(?:and_eq)|(?:delete)|(?:not_eq)|(?:bitand)|(?:bitor)|(?:compl)|(?:or_eq)|(?:not)|(?:xor)|(?:new)|(?:and)|(?:or))(?!\\w)",
          "name": "keyword.operator.wordlike.dp keyword.operator.$0.dp"
        }
      ]
    }
  }
}